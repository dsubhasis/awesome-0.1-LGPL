/* Generated By:JJTree&JavaCC: Do not edit this line. SQLPPTokenManager.java */
package edu.sdsc.SQLPP;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonArrayBuilder;
import edu.sdsc.awesome.adil.parser.StatementOperation.SQLPPUtil;

/** Token Manager. */
public class SQLPPTokenManager implements SQLPPConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 163;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 165;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 164;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 34:
         jjmatchedKind = 132;
         return jjMoveNfa_0(0, 0);
      case 35:
         jjmatchedKind = 131;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 118;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 121;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 122;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 119;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 120;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 127;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 117;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 128;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 115;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 126;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 130;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x880L);
      case 61:
         jjmatchedKind = 137;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100L);
      case 63:
         jjmatchedKind = 129;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 125;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x3fcL, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2fe000L, 0x1000000000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x3fd00000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x7fc0000000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x7f8000000000L, 0x0L, 0x20000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xffc000000000000L, 0x0L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1fL, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0L, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f00L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x78000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f80000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00000000L, 0x10000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00000000000L, 0x0L);
      case 91:
         jjmatchedKind = 123;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 124;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 113;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3fcL, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2fe000L, 0x1000000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3fd00000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7fc0000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7f8000000000L, 0x0L, 0x20000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xffc000000000000L, 0x10000000000000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1fL, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0L, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f00L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x78000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f80000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00000000L, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x0L);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000502000L, active1, 0x80002088000L, active2, 0x20000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000008007800400L, active1, 0x11c700003L, active2, 0L);
      case 70:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300200000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x2010018000000L, active1, 0x40000000000cL, active2, 0x4000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x20140004004L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7e8000600000018L, active1, 0x7000000000L, active2, 0L);
      case 79:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000400002f0000L, active1, 0x10000200100b0L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0x18000000400L, active2, 0L);
      case 82:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x880020008000L, active1, 0x800000061000L, active2, 0x10000L);
      case 83:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0x60000000000L, active2, 0L);
      case 84:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0xc0800000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x700000000200L, active1, 0x1006000L, active2, 0x8000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x7080000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000502000L, active1, 0x80002088000L, active2, 0x20000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000008007800400L, active1, 0x11c700003L, active2, 0L);
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300200000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2010018000000L, active1, 0x40000000000cL, active2, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20140004004L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7e8000600000018L, active1, 0x7000000000L, active2, 0L);
      case 111:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000400002f0000L, active1, 0x10000200100b0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0x18000000400L, active2, 0L);
      case 114:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x880020008000L, active1, 0x800000061000L, active2, 0x10000L);
      case 115:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0x60000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0xc0800000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x700000000200L, active1, 0x1006000L, active2, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x7080000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 124:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x40000010L, active2, 0L);
      case 67:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000L, active1, 0x4000000L, active2, 0L);
      case 68:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x8000001020L, active2, 0L);
      case 69:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8840008000L, active1, 0x300200020400L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000201000000L, active1, 0x100100L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000002000000000L, active1, 0x841000040000L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000004L, active2, 0L);
      case 76:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x310002200000L, active1, 0x80008010000L, active2, 0x28000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L, active1, 0x120000008L, active2, 0L);
      case 78:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x82400000040000L, active1, 0x4000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x880020004000L, active1, 0x80000000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000020L, active1, 0x400000000L, active2, 0L);
      case 82:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80800L, active1, 0x800040L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000011c002000L, active1, 0x10000000000L, active2, 0x4000L);
      case 84:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x608004000500600L, active1, 0x40000260e001L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L, active2, 0x10000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 87:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 2;
         }
         break;
      case 89:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x40000010L, active2, 0L);
      case 99:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000L, active1, 0x4000000L, active2, 0L);
      case 100:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x8000001020L, active2, 0L);
      case 101:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8840008000L, active1, 0x300200020400L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000201000000L, active1, 0x100100L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000002000000000L, active1, 0x10841000040000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000004L, active2, 0L);
      case 108:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x310002200000L, active1, 0x80008010000L, active2, 0x28000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L, active1, 0x120000008L, active2, 0L);
      case 110:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x82400000040000L, active1, 0x4000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x880020004000L, active1, 0x80000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000020L, active1, 0x400000000L, active2, 0L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80800L, active1, 0x800040L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000011c002000L, active1, 0x10000000000L, active2, 0x4000L);
      case 116:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x608004000500600L, active1, 0x40000260e001L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L, active2, 0x10000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 2;
         }
         break;
      case 121:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x508000L, active1, 0x8000000040L, active2, 0L);
      case 67:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400008000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7e0005002000800L, active1, 0x14008803020L, active2, 0L);
      case 72:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000001000000L, active1, 0x2010008L, active2, 0L);
      case 76:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200080a00020L, active1, 0L, active2, 0L);
      case 77:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x40000L, active2, 0L);
      case 78:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0x1042000000000L, active2, 0L);
      case 79:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000200L, active1, 0x1004000000L, active2, 0L);
      case 80:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x30000L, active1, 0x100004000L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x800080000L, active1, 0x200040100000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000004000L, active1, 0x100L, active2, 0x24000L);
      case 84:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2030010000000L, active1, 0x800000000001L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x80000600000L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000400L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x508000L, active1, 0x8000000040L, active2, 0L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400008000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7e0005002000800L, active1, 0x14008803020L, active2, 0L);
      case 104:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000001000000L, active1, 0x2010008L, active2, 0L);
      case 108:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200080a00020L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x40000L, active2, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0x1042000000000L, active2, 0L);
      case 111:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000200L, active1, 0x1004000000L, active2, 0L);
      case 112:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x30000L, active1, 0x100004000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800080000L, active1, 0x200040100000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000004000L, active1, 0x100L, active2, 0x24000L);
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2030010000000L, active1, 0x800000000001L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x80000600000L, active2, 0L);
      case 118:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         break;
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000400L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x80830000L, active1, 0x40000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8010000L, active2, 0L);
      case 69:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100402c4400L, active1, 0x100100L, active2, 0L);
      case 71:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0x20L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x1L, active2, 0x4000L);
      case 77:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
         }
         break;
      case 78:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000001000000L, active1, 0x4000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000008000000L, active1, 0x2100000000L, active2, 0L);
      case 80:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x700004200000000L, active1, 0x10000600000L, active2, 0L);
      case 83:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000100000L, active1, 0x4002020000L, active2, 0L);
      case 84:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x622002008000L, active1, 0x8000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 88:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         break;
      case 89:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80830000L, active1, 0x40000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8010000L, active2, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100402c4400L, active1, 0x100100L, active2, 0L);
      case 103:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0x20L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x1L, active2, 0x4000L);
      case 109:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
         }
         break;
      case 110:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000001000000L, active1, 0x4000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000008000000L, active1, 0x2100000000L, active2, 0L);
      case 112:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x700004200000000L, active1, 0x10000600000L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000100000L, active1, 0x4002020000L, active2, 0L);
      case 116:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x622002008000L, active1, 0x8000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         break;
      case 121:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x200270000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 69:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x220000500600L, active1, 0L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 71:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x400081000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 78:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200004058000000L, active1, 0x400001L, active2, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 82:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000800000L, active1, 0x100040020L, active2, 0L);
      case 83:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x100000L, active2, 0L);
      case 84:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 89:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x200270000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x220000500600L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 103:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400081000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200004058000000L, active1, 0x400001L, active2, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000800000L, active1, 0x100040020L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x100000L, active2, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x200004000080000L, active1, 0x104000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000200000000L, active1, 0L, active2, 0L);
      case 71:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         break;
      case 72:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0x2400000L, active2, 0L);
      case 78:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000200L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x20L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x20000L, active2, 0L);
      case 84:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1210000L, active1, 0L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200004000080000L, active1, 0x104000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000200000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         break;
      case 104:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0x2400000L, active2, 0L);
      case 110:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000200L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x20L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x20000L, active2, 0L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1210000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000200L, active1, 0x2000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x1210000L, active1, 0L);
      case 76:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x104000000L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      case 84:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0x20000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000200L, active1, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1210000L, active1, 0L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x104000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 69:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 71:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
         }
         break;
      case 78:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x1210000L, active1, 0L);
      case 80:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 8;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L, active1, 0L);
      case 83:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 8;
         }
         break;
      case 89:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 103:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
         }
         break;
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1210000L, active1, 0L);
      case 112:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 8;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L, active1, 0L);
      case 115:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 8;
         }
         break;
      case 121:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L, active1, 0L);
      case 68:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 9;
         }
         break;
      case 78:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 9;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L, active1, 0L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 9;
         }
         break;
      case 110:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 12;
         }
         break;
      case 100:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 68;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 173)
                        kind = 173;
                  }
                  else if (curChar == 45)
                     jjAddStates(3, 4);
                  else if (curChar == 47)
                     jjAddStates(5, 6);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(40, 44);
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 36)
                  {
                     if (kind > 151)
                        kind = 151;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 141)
                        kind = 141;
                     jjCheckNAddStates(7, 16);
                  }
                  else if (curChar == 62)
                     jjCheckNAdd(16);
                  else if (curChar == 60)
                     jjCheckNAdd(16);
                  break;
               case 2:
                  jjCheckNAddStates(17, 19);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(17, 19);
                  break;
               case 7:
                  if (curChar == 47)
                     jjCheckNAddStates(17, 19);
                  break;
               case 14:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0x5000000000000000L & l) != 0L && kind > 173)
                     kind = 173;
                  break;
               case 16:
               case 20:
                  if (curChar == 61 && kind > 173)
                     kind = 173;
                  break;
               case 17:
                  if (curChar == 60)
                     jjCheckNAdd(16);
                  break;
               case 18:
                  if (curChar == 62)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAddStates(7, 16);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if (curChar == 45)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 34);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(40, 44);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if (curChar == 45)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 34);
                  break;
               case 45:
                  if (curChar == 47)
                     jjAddStates(5, 6);
                  break;
               case 46:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 47:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 10 && kind > 166)
                     kind = 166;
                  break;
               case 49:
                  if (curChar != 47)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAddStates(20, 22);
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAddStates(20, 22);
                  break;
               case 51:
                  if ((0x2400L & l) != 0L && kind > 167)
                     kind = 167;
                  break;
               case 52:
                  if (curChar == 10 && kind > 167)
                     kind = 167;
                  break;
               case 53:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 45)
                     jjAddStates(3, 4);
                  break;
               case 55:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 56:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 10 && kind > 168)
                     kind = 168;
                  break;
               case 58:
                  if (curChar != 45)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddStates(23, 25);
                  break;
               case 59:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddStates(23, 25);
                  break;
               case 60:
                  if ((0x2400L & l) != 0L && kind > 169)
                     kind = 169;
                  break;
               case 61:
                  if (curChar == 10 && kind > 169)
                     kind = 169;
                  break;
               case 62:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAddStates(0, 2);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAddTwoStates(65, 66);
                  break;
               case 66:
                  if (curChar == 46)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAddTwoStates(66, 67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(17, 19);
                  else if (curChar == 95)
                  {
                     if (kind > 151)
                        kind = 151;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(14);
                  }
                  break;
               case 1:
                  if (curChar == 96)
                     jjCheckNAddStates(17, 19);
                  break;
               case 2:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 3:
                  if (curChar == 96 && kind > 152)
                     kind = 152;
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(26, 33);
                  break;
               case 6:
                  if (curChar == 92)
                     jjCheckNAddStates(17, 19);
                  break;
               case 8:
                  if (curChar == 98)
                     jjCheckNAddStates(17, 19);
                  break;
               case 9:
                  if (curChar == 102)
                     jjCheckNAddStates(17, 19);
                  break;
               case 10:
                  if (curChar == 110)
                     jjCheckNAddStates(17, 19);
                  break;
               case 11:
                  if (curChar == 114)
                     jjCheckNAddStates(17, 19);
                  break;
               case 12:
                  if (curChar == 116)
                     jjCheckNAddStates(17, 19);
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(14);
                  break;
               case 26:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 34:
                  if ((0x4000000040L & l) != 0L && kind > 148)
                     kind = 148;
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 47:
                  jjAddStates(40, 41);
                  break;
               case 50:
                  if (kind > 167)
                     kind = 167;
                  jjAddStates(20, 22);
                  break;
               case 56:
                  jjAddStates(42, 43);
                  break;
               case 59:
                  if (kind > 169)
                     kind = 169;
                  jjAddStates(23, 25);
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAddStates(0, 2);
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAddTwoStates(66, 67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 19);
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjAddStates(20, 22);
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjAddStates(23, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 68 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 163;
         return jjMoveNfa_1(0, 0);
      case 10:
         jjmatchedKind = 165;
         return jjMoveNfa_1(0, 0);
      case 13:
         jjmatchedKind = 164;
         return jjMoveNfa_1(0, 0);
      case 33:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x400L);
      case 34:
         jjmatchedKind = 132;
         return jjMoveNfa_1(0, 0);
      case 35:
         jjmatchedKind = 131;
         return jjMoveNfa_1(0, 0);
      case 37:
         jjmatchedKind = 118;
         return jjMoveNfa_1(0, 0);
      case 40:
         jjmatchedKind = 121;
         return jjMoveNfa_1(0, 0);
      case 41:
         jjmatchedKind = 122;
         return jjMoveNfa_1(0, 0);
      case 42:
         jjmatchedKind = 119;
         return jjMoveNfa_1(0, 0);
      case 43:
         jjmatchedKind = 120;
         return jjMoveNfa_1(0, 0);
      case 44:
         jjmatchedKind = 127;
         return jjMoveNfa_1(0, 0);
      case 45:
         jjmatchedKind = 117;
         return jjMoveNfa_1(0, 0);
      case 46:
         jjmatchedKind = 128;
         return jjMoveNfa_1(0, 0);
      case 47:
         jjmatchedKind = 115;
         return jjMoveNfa_1(0, 0);
      case 58:
         jjmatchedKind = 126;
         return jjMoveNfa_1(0, 0);
      case 59:
         jjmatchedKind = 130;
         return jjMoveNfa_1(0, 0);
      case 60:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x880L);
      case 61:
         jjmatchedKind = 137;
         return jjMoveNfa_1(0, 0);
      case 62:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100L);
      case 63:
         jjmatchedKind = 129;
         return jjMoveNfa_1(0, 0);
      case 64:
         jjmatchedKind = 125;
         return jjMoveNfa_1(0, 0);
      case 70:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20000L);
      case 77:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4000L);
      case 78:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8000L);
      case 84:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000L);
      case 91:
         jjmatchedKind = 123;
         return jjMoveNfa_1(0, 0);
      case 93:
         jjmatchedKind = 124;
         return jjMoveNfa_1(0, 0);
      case 94:
         jjmatchedKind = 113;
         return jjMoveNfa_1(0, 0);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x10000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000L);
      case 124:
         return jjMoveStringLiteralDfa1_1(0x4000000000000L, 0x0L);
      case 126:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 0);
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x4000L);
      case 82:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x10000L);
      case 85:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x20000L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active1, 0x10000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x8000L);
      case 124:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 1);
}
private int jjMoveStringLiteralDfa2_1(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 1);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_1(active1, 0L, active2, 0x28000L);
      case 83:
         return jjMoveStringLiteralDfa3_1(active1, 0L, active2, 0x4000L);
      case 85:
         return jjMoveStringLiteralDfa3_1(active1, 0L, active2, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active1, 0x10000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active1, 0L, active2, 0x28000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active1, 0L, active2, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active1, 0L, active2, 0x10000L);
      default :
         break;
   }
   return jjMoveNfa_1(0, 2);
}
private int jjMoveStringLiteralDfa3_1(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 2);
   }
   switch(curChar)
   {
      case 69:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         break;
      case 76:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 3;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa4_1(active1, 0L, active2, 0x24000L);
      case 101:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         break;
      case 108:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 3;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa4_1(active1, 0L, active2, 0x24000L);
      case 118:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 3);
}
private int jjMoveStringLiteralDfa4_1(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 3);
   }
   switch(curChar)
   {
      case 69:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 4;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa5_1(active2, 0x4000L);
      case 101:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa5_1(active2, 0x4000L);
      default :
         break;
   }
   return jjMoveNfa_1(0, 4);
}
private int jjMoveStringLiteralDfa5_1(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 4);
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa6_1(active2, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa6_1(active2, 0x4000L);
      default :
         break;
   }
   return jjMoveNfa_1(0, 5);
}
private int jjMoveStringLiteralDfa6_1(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_1(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(0, 5);
   }
   switch(curChar)
   {
      case 71:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         break;
      case 103:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(0, 6);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 57;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 141)
                        kind = 141;
                     jjCheckNAddStates(44, 53);
                  }
                  else if (curChar == 45)
                     jjAddStates(54, 55);
                  else if (curChar == 47)
                     jjAddStates(56, 57);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(34, 38);
                  else if (curChar == 36)
                  {
                     if (kind > 151)
                        kind = 151;
                  }
                  break;
               case 2:
                  jjCheckNAddStates(17, 19);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(17, 19);
                  break;
               case 7:
                  if (curChar == 47)
                     jjCheckNAddStates(17, 19);
                  break;
               case 14:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAddStates(44, 53);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if (curChar == 45)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if (curChar == 45)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 46)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 28);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(34, 38);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if (curChar == 45)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 28);
                  break;
               case 39:
                  if (curChar == 47)
                     jjAddStates(56, 57);
                  break;
               case 40:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 10 && kind > 166)
                     kind = 166;
                  break;
               case 43:
                  if (curChar != 47)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAddStates(58, 60);
                  break;
               case 44:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAddStates(58, 60);
                  break;
               case 45:
                  if ((0x2400L & l) != 0L && kind > 167)
                     kind = 167;
                  break;
               case 46:
                  if (curChar == 10 && kind > 167)
                     kind = 167;
                  break;
               case 47:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 45)
                     jjAddStates(54, 55);
                  break;
               case 49:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 50:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar == 10 && kind > 168)
                     kind = 168;
                  break;
               case 52:
                  if (curChar != 45)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddStates(61, 63);
                  break;
               case 53:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddStates(61, 63);
                  break;
               case 54:
                  if ((0x2400L & l) != 0L && kind > 169)
                     kind = 169;
                  break;
               case 55:
                  if (curChar == 10 && kind > 169)
                     kind = 169;
                  break;
               case 56:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(14);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(17, 19);
                  else if (curChar == 95)
                  {
                     if (kind > 151)
                        kind = 151;
                  }
                  break;
               case 1:
                  if (curChar == 96)
                     jjCheckNAddStates(17, 19);
                  break;
               case 2:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 3:
                  if (curChar == 96 && kind > 152)
                     kind = 152;
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(26, 33);
                  break;
               case 6:
                  if (curChar == 92)
                     jjCheckNAddStates(17, 19);
                  break;
               case 8:
                  if (curChar == 98)
                     jjCheckNAddStates(17, 19);
                  break;
               case 9:
                  if (curChar == 102)
                     jjCheckNAddStates(17, 19);
                  break;
               case 10:
                  if (curChar == 110)
                     jjCheckNAddStates(17, 19);
                  break;
               case 11:
                  if (curChar == 114)
                     jjCheckNAddStates(17, 19);
                  break;
               case 12:
                  if (curChar == 116)
                     jjCheckNAddStates(17, 19);
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(14);
                  break;
               case 20:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 28:
                  if ((0x4000000040L & l) != 0L && kind > 148)
                     kind = 148;
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 41:
                  jjAddStates(70, 71);
                  break;
               case 44:
                  if (kind > 167)
                     kind = 167;
                  jjAddStates(58, 60);
                  break;
               case 50:
                  jjAddStates(72, 73);
                  break;
               case 53:
                  if (kind > 169)
                     kind = 169;
                  jjAddStates(61, 63);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 19);
                  break;
               case 41:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 44:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjAddStates(58, 60);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(72, 73);
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjAddStates(61, 63);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 43)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if (curChar != 32)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0xfffffbffffffffffL & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  kind = 170;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   64, 65, 66, 55, 58, 46, 49, 22, 23, 24, 29, 30, 33, 34, 35, 36, 
   38, 2, 3, 4, 50, 51, 53, 59, 60, 62, 5, 6, 7, 8, 9, 10, 
   11, 12, 27, 28, 31, 32, 42, 43, 47, 48, 56, 57, 16, 17, 18, 23, 
   24, 27, 28, 29, 30, 32, 49, 52, 40, 43, 44, 45, 47, 53, 54, 56, 
   21, 22, 25, 26, 36, 37, 41, 42, 50, 51, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\136", "\174\174", "\57", "\151\144\151\166", "\55", "\45", "\52", 
"\53", "\50", "\51", "\133", "\135", "\100", "\72", "\54", "\56", "\77", "\73", 
"\43", "\42", "\74", "\76", "\74\75", "\76\75", "\75", "\41\75", "\74\76", "\176\75", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_DBL_BRACE",
   "INSIDE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xffffffffffffffffL, 0x380401bbffffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x7f800000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x40000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[68];
private final int[] jjstateSet = new int[136];
protected char curChar;
/** Constructor. */
public SQLPPTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SQLPPTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 68; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
