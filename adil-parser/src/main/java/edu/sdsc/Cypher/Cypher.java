/* Generated By:JJTree&JavaCC: Do not edit this line. Cypher.java */
package edu.sdsc.Cypher;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonArrayBuilder;


import static edu.sdsc.awesome.adil.parser.StatementOperation.CypherUtil.*;

public class Cypher/*@bgen(jjtree)*/implements CypherTreeConstants, CypherConstants {/*@bgen(jjtree)*/
  protected JJTCypherState jjtree = new JJTCypherState();public static void main(String[] args) {
    Reader sr = new StringReader(args[0]);
    JsonObjectBuilder cypherNode = Json.createObjectBuilder();


    Cypher p = new Cypher(sr);
    try {
      p.Expression(cypherNode);
    } catch (ParseException pe) {
      pe.printStackTrace();
    }
  }

  final public JsonObjectBuilder Expression(JsonObjectBuilder jObject) throws ParseException {
                                                           /*@bgen(jjtree) Expression */
                                                           SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);JsonArrayBuilder cypherPlan = Json.createArrayBuilder();
    try {
      jj_consume_token(QUOT);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CREATE:
        case MATCH:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
         JsonObjectBuilder tempjObject = Json.createObjectBuilder();
        tempjObject = Statement(tempjObject);
                                                                                                            cypherPlan.add(tempjObject.build());
        jj_consume_token(SEMICOLON);
      }
      jj_consume_token(QUOT);
   jObject.add("Cypher", cypherPlan.build());
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jObject;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder Statement(JsonObjectBuilder jObject) throws ParseException {
                                                          /*@bgen(jjtree) Statement */
                                                          SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
                                                          boolean jjtc000 = true;
                                                          jjtree.openNodeScope(jjtn000);Token T; JsonArrayBuilder tempArray = Json.createArrayBuilder();JsonObjectBuilder tempjObject = Json.createObjectBuilder();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE:
        tempjObject = createStatement(tempjObject);
                                                          tempArray.add(tempjObject);
        break;
      case MATCH:
        tempjObject = MatchStatement(tempjObject);
                                                                                                                                      tempArray.add(tempjObject);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
 jObject.add("STATEMENT", tempArray.build());
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder createStatement(JsonObjectBuilder jObject) throws ParseException {
                                                                 /*@bgen(jjtree) createStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCREATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRAINT:
      case SEMICOLON:
        jObject = createConstantStatement(jObject);
        break;
      case LEFTPAREN:
        jObject = createEntryStatement(jObject);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jObject;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder createConstantStatement(JsonObjectBuilder jObject) throws ParseException {
                                                                        /*@bgen(jjtree) createConstantStatement */
                                                                        SimpleNode jjtn000 = new SimpleNode(JJTCREATECONSTANTSTATEMENT);
                                                                        boolean jjtc000 = true;
                                                                        jjtree.openNodeScope(jjtn000);Token t; Token x; JsonObjectBuilder data = Json.createObjectBuilder();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRAINT:
        jj_consume_token(CONSTRAINT);
        jj_consume_token(ON);
        jj_consume_token(LEFTPAREN);
        x = jj_consume_token(CYPHERFIELD);
        jj_consume_token(RIGHTPAREN);
        jj_consume_token(ASSERT);
        t = jj_consume_token(FIELDNAME);
        jj_consume_token(IS);
        jj_consume_token(UNIQUE);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        jj_consume_token(CONSTRAINT);
        jj_consume_token(ON);
        jj_consume_token(LEFTPAREN);
        x = jj_consume_token(CYPHERFIELD);
        jj_consume_token(RIGHTPAREN);
        jj_consume_token(ASSERT);
        t = jj_consume_token(FIELDNAME);
        jj_consume_token(IS);
        jj_consume_token(UNIQUE);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
 data.add("Node", x.image);
 data.add("Tuple", t.image);
 data.add("type", "UNIQUE");
 jObject.add("CONSTRAINT", data.build());
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder createEntryStatement(JsonObjectBuilder jObject) throws ParseException {
                                                                     /*@bgen(jjtree) createEntryStatement */
                                                                     SimpleNode jjtn000 = new SimpleNode(JJTCREATEENTRYSTATEMENT);
                                                                     boolean jjtc000 = true;
                                                                     jjtree.openNodeScope(jjtn000);JsonObjectBuilder cypherNode = Json.createObjectBuilder(); JsonArrayBuilder cNode = Json.createArrayBuilder();  JsonArrayBuilder cEdge = Json.createArrayBuilder(); Token t = null;
    try {
      cypherNode = cypherNode(cypherNode);
                                       cNode.add(cypherNode.build());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        t = CypherEdge();
                                                                                           cEdge.add(t.image );
        cypherNode = cypherNode(cypherNode);
                                                                                                                                                       cNode.add(cypherNode.build());
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
  jObject.add("AdilNode", cNode.build());
  jObject.add("edge", cEdge.build());
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder MatchStatement(JsonObjectBuilder jObject) throws ParseException {
                                                               /*@bgen(jjtree) MatchStatement */
                                                               SimpleNode jjtn000 = new SimpleNode(JJTMATCHSTATEMENT);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);JsonObjectBuilder mergeStmt = Json.createObjectBuilder(); Token t;
    try {
      jj_consume_token(MATCH);
      jj_consume_token(LEFTPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CYPHERFIELD:
        t = jj_consume_token(CYPHERFIELD);
        break;
      case ALPHANUM:
        t = jj_consume_token(ALPHANUM);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RIGHTPAREN);
      mergeStmt = MergeStatement(mergeStmt);
  jObject = handleMatchStatement(jObject, t.image, mergeStmt );
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder MergeStatement(JsonObjectBuilder mergeStmt) throws ParseException {
                                                                 /*@bgen(jjtree) MergeStatement */
                                                                 SimpleNode jjtn000 = new SimpleNode(JJTMERGESTATEMENT);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);JsonObjectBuilder createStmt = Json.createObjectBuilder();
    try {
      jj_consume_token(MERGE);
      createStmt = createEntryStatement(createStmt);
 mergeStmt.add("MERGE", createStmt.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return mergeStmt;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder cypherNode(JsonObjectBuilder jObject) throws ParseException {
                                                           /*@bgen(jjtree) cypherNode */
                                                           SimpleNode jjtn000 = new SimpleNode(JJTCYPHERNODE);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);Token t; JsonObjectBuilder jb = Json.createObjectBuilder();
    try {
      jj_consume_token(LEFTPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CYPHERFIELD:
        t = jj_consume_token(CYPHERFIELD);
        break;
      case ALPHANUM:
        t = jj_consume_token(ALPHANUM);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTCURL:
        jj_consume_token(LEFTCURL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHANUM:
          jb = nodeProperty(jb);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(RIGHTCURL);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPAREN);
                                                                                                                                 jObject = handleCypherNode(jObject, jb, t.image );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(LEFTPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CYPHERFIELD:
          t = jj_consume_token(CYPHERFIELD);
          break;
        case ALPHANUM:
          t = jj_consume_token(ALPHANUM);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTCURL:
          jj_consume_token(LEFTCURL);
          jb = nodeProperty(jb);
          jj_consume_token(RIGHTCURL);
                                                                                                                                                                                                                                                                                                        jObject = handleCypherNode(jObject, jb, t.image );
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(RIGHTPAREN);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token CypherEdge() throws ParseException {
                       /*@bgen(jjtree) CypherEdge */
                       SimpleNode jjtn000 = new SimpleNode(JJTCYPHEREDGE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(MINUS);
      jj_consume_token(LEFTBRACKET);
      jj_consume_token(COLON);
      t = jj_consume_token(ALPHANUM);
      jj_consume_token(RIGHTBRACKET);
      jj_consume_token(MINUS);
      jj_consume_token(GT);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return t;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder nodeProperty(JsonObjectBuilder jb) throws ParseException {
                                                         /*@bgen(jjtree) nodeProperty */
                                                          SimpleNode jjtn000 = new SimpleNode(JJTNODEPROPERTY);
                                                          boolean jjtc000 = true;
                                                          jjtree.openNodeScope(jjtn000);Token x; Token t;  boolean unnestFlag = false; JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      x = jj_consume_token(ALPHANUM);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELDNAME:
        t = jj_consume_token(FIELDNAME);
        break;
      case UNNEST:
        jj_consume_token(UNNEST);
        jj_consume_token(LEFTPAREN);
        t = jj_consume_token(FIELDNAME);
        jj_consume_token(RIGHTPAREN);
                                                                                                            unnestFlag = true;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                    tempJB = handleNodeProperty( tempJB, x.image,  t.image, unnestFlag );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_2:
        while (true) {
          jj_consume_token(COMMA);
          x = jj_consume_token(ALPHANUM);
          jj_consume_token(COLON);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FIELDNAME:
            t = jj_consume_token(FIELDNAME);
            break;
          case UNNEST:
            jj_consume_token(UNNEST);
            jj_consume_token(LEFTPAREN);
            t = jj_consume_token(FIELDNAME);
            jj_consume_token(RIGHTPAREN);
                                                                                                                                                                                                                                                                                                                                 unnestFlag = true;
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                                                                                                                                                                                                                                                                                                          tempJB = handleNodeProperty( tempJB, x.image,  t.image, unnestFlag );
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_2;
          }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
 jb.add(x.image, tempJB.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jb;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public CypherTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x84,0x84,0x40040008,0x40000008,0x4000,0x0,0x0,0x0,0x400000,0x0,0x400000,0x8000000,0x0,0x0,0x8000000,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x140000,0x140000,0x40000,0x0,0x140000,0x0,0x0,0x80100,0x80100,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Cypher(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Cypher(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CypherTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Cypher(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CypherTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Cypher(CypherTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CypherTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
