/* Generated By:JJTree&JavaCC: Do not edit this line. AdilConstants.java */
package edu.sdsc.adil;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AdilConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 6;
  /** RegularExpression Id. */
  int GREATERTHANEQUALS = 7;
  /** RegularExpression Id. */
  int MINORTHANEQUALS = 8;
  /** RegularExpression Id. */
  int NOTEQUALSSTANDARD = 9;
  /** RegularExpression Id. */
  int NOTEQUALSBANG = 10;
  /** RegularExpression Id. */
  int CONCAT = 11;
  /** RegularExpression Id. */
  int DIGITS = 12;
  /** RegularExpression Id. */
  int PLUS = 13;
  /** RegularExpression Id. */
  int NOT = 14;
  /** RegularExpression Id. */
  int SEMICOLON = 15;
  /** RegularExpression Id. */
  int COLON = 16;
  /** RegularExpression Id. */
  int EQAL = 17;
  /** RegularExpression Id. */
  int GREATER = 18;
  /** RegularExpression Id. */
  int LESS = 19;
  /** RegularExpression Id. */
  int FBRACKETSTART = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int FBRACKETEND = 22;
  /** RegularExpression Id. */
  int DOT = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int StartSQBracket = 25;
  /** RegularExpression Id. */
  int EndSQBracket = 26;
  /** RegularExpression Id. */
  int StartCurlyBracket = 27;
  /** RegularExpression Id. */
  int EndCurlyBracket = 28;
  /** RegularExpression Id. */
  int AT = 29;
  /** RegularExpression Id. */
  int OPERATOR = 30;
  /** RegularExpression Id. */
  int MINUS = 31;
  /** RegularExpression Id. */
  int CREATE = 32;
  /** RegularExpression Id. */
  int DELETE = 33;
  /** RegularExpression Id. */
  int ALTER = 34;
  /** RegularExpression Id. */
  int LOAD = 35;
  /** RegularExpression Id. */
  int IMPORT = 36;
  /** RegularExpression Id. */
  int DATASOURCE = 37;
  /** RegularExpression Id. */
  int WITH = 38;
  /** RegularExpression Id. */
  int WHERE = 39;
  /** RegularExpression Id. */
  int AND = 40;
  /** RegularExpression Id. */
  int OR = 41;
  /** RegularExpression Id. */
  int STORE = 42;
  /** RegularExpression Id. */
  int TYPE = 43;
  /** RegularExpression Id. */
  int PARTITION = 44;
  /** RegularExpression Id. */
  int BY = 45;
  /** RegularExpression Id. */
  int AS = 46;
  /** RegularExpression Id. */
  int TEMPORALRELATION = 47;
  /** RegularExpression Id. */
  int TEMPORALGRAPH = 48;
  /** RegularExpression Id. */
  int ON = 49;
  /** RegularExpression Id. */
  int REPORT = 50;
  /** RegularExpression Id. */
  int ANALYSIS = 51;
  /** RegularExpression Id. */
  int EXECUTE = 52;
  /** RegularExpression Id. */
  int EVERY = 53;
  /** RegularExpression Id. */
  int PROPERTYGRAPH = 54;
  /** RegularExpression Id. */
  int MATRIX = 55;
  /** RegularExpression Id. */
  int INTEGER = 56;
  /** RegularExpression Id. */
  int STRING = 57;
  /** RegularExpression Id. */
  int TEXT = 58;
  /** RegularExpression Id. */
  int LONG = 59;
  /** RegularExpression Id. */
  int DOUBLE = 60;
  /** RegularExpression Id. */
  int HISTOGRAM = 61;
  /** RegularExpression Id. */
  int VIEW = 62;
  /** RegularExpression Id. */
  int COLLECTION = 63;
  /** RegularExpression Id. */
  int CONNECTION = 64;
  /** RegularExpression Id. */
  int TO = 65;
  /** RegularExpression Id. */
  int FROM = 66;
  /** RegularExpression Id. */
  int LIBRARY = 67;
  /** RegularExpression Id. */
  int DICTIONARY = 68;
  /** RegularExpression Id. */
  int ONTOLOGY = 69;
  /** RegularExpression Id. */
  int WITNESS = 70;
  /** RegularExpression Id. */
  int PROJECT = 71;
  /** RegularExpression Id. */
  int AWSM = 72;
  /** RegularExpression Id. */
  int NODE = 73;
  /** RegularExpression Id. */
  int NODES = 74;
  /** RegularExpression Id. */
  int PATH = 75;
  /** RegularExpression Id. */
  int SELECT = 76;
  /** RegularExpression Id. */
  int ORDER = 77;
  /** RegularExpression Id. */
  int GROUP = 78;
  /** RegularExpression Id. */
  int USE = 79;
  /** RegularExpression Id. */
  int RELATION = 80;
  /** RegularExpression Id. */
  int CSV = 81;
  /** RegularExpression Id. */
  int GRAPHQL = 82;
  /** RegularExpression Id. */
  int JSON = 83;
  /** RegularExpression Id. */
  int XML = 84;
  /** RegularExpression Id. */
  int SCHEMA = 85;
  /** RegularExpression Id. */
  int ENV = 86;
  /** RegularExpression Id. */
  int IN = 87;
  /** RegularExpression Id. */
  int ANNOTATE = 88;
  /** RegularExpression Id. */
  int FILTER = 89;
  /** RegularExpression Id. */
  int EXECUTESQLPP = 90;
  /** RegularExpression Id. */
  int CONSTRUCTGRAPH = 91;
  /** RegularExpression Id. */
  int CYPHERQUERY = 92;
  /** RegularExpression Id. */
  int EXECUTECYPHER = 93;
  /** RegularExpression Id. */
  int EXECUTESQL = 94;
  /** RegularExpression Id. */
  int FORALL = 95;
  /** RegularExpression Id. */
  int DIGIT = 96;
  /** RegularExpression Id. */
  int LETTER = 97;
  /** RegularExpression Id. */
  int ALPHANUM = 98;
  /** RegularExpression Id. */
  int FIELDNAME = 99;
  /** RegularExpression Id. */
  int UNQUOTED_IDENTIFIER = 100;
  /** RegularExpression Id. */
  int QUOTED_IDENTIFIER = 101;
  /** RegularExpression Id. */
  int INPATH = 102;
  /** RegularExpression Id. */
  int OUTPATH = 103;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 4>",
    "<token of kind 5>",
    "<WHITESPACE>",
    "<GREATERTHANEQUALS>",
    "<MINORTHANEQUALS>",
    "<NOTEQUALSSTANDARD>",
    "<NOTEQUALSBANG>",
    "<CONCAT>",
    "<DIGITS>",
    "\"+\"",
    "\"!\"",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"(\"",
    "\"return\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"@\"",
    "<OPERATOR>",
    "\"-\"",
    "\"create\"",
    "\"delete\"",
    "\"alter\"",
    "\"load\"",
    "\"import\"",
    "\"datasource\"",
    "\"with\"",
    "\"where\"",
    "\"and\"",
    "\"or\"",
    "\"store\"",
    "\"type\"",
    "\"partition\"",
    "\"by\"",
    "\"as\"",
    "\"temporalrelation\"",
    "\"temporalgraph\"",
    "\"on\"",
    "\"report\"",
    "\"analysis\"",
    "\"execute\"",
    "\"every\"",
    "\"propertygraph\"",
    "\"matrix\"",
    "\"integer\"",
    "\"string\"",
    "\"text\"",
    "\"long\"",
    "\"double\"",
    "\"histogram\"",
    "\"view\"",
    "\"collection\"",
    "\"connection\"",
    "\"to\"",
    "\"from\"",
    "\"library\"",
    "\"dictionary\"",
    "\"ontology\"",
    "\"witness\"",
    "\"project\"",
    "\"awsm\"",
    "\"node\"",
    "\"nodes\"",
    "\"path\"",
    "\"select\"",
    "\"order\"",
    "\"group\"",
    "\"use\"",
    "\"relation\"",
    "\"csv\"",
    "\"graphql\"",
    "\"json\"",
    "\"xml\"",
    "\"schema\"",
    "\"env\"",
    "\"in\"",
    "\"annotate\"",
    "\"filter\"",
    "\"executesqlpp\"",
    "\"constructgraph\"",
    "\"cypherquery\"",
    "\"executecypher\"",
    "\"executesql\"",
    "\"forall\"",
    "<DIGIT>",
    "<LETTER>",
    "<ALPHANUM>",
    "<FIELDNAME>",
    "<UNQUOTED_IDENTIFIER>",
    "<QUOTED_IDENTIFIER>",
    "<INPATH>",
    "<OUTPATH>",
  };

}
