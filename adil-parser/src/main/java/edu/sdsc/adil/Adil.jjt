options{
VISITOR=true;
MULTI=true;
STATIC = false;
}

PARSER_BEGIN(Adil)

package edu.sdsc.adil;

import java.io.*;
import java.util.List;
import java.util.ArrayList;


import javax.json.*;




import edu.sdsc.awesome.adil.parser.ParserTable.VariableTable;
import edu.sdsc.awesome.adil.parser.ParserTable.VariableTableEntry;
import edu.sdsc.awesome.adil.parser.ParserTable.DataTypeEnum;


import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.ImportLibraryDBCheck;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleCypherQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleSQLQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.*;
import edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil;
import edu.sdsc.awesome.adil.parser.StatementOperation.SelectFunction;




import edu.sdsc.awesome.adil.parser.ParserTable.VariableTable;


import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.ImportLibraryDBCheck;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleCypherQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleSQLQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.*;
import edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil;
import org.apache.commons.lang.RandomStringUtils;


public class Adil {

private static Integer planID = edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.generateUniqueID();

private JsonObjectBuilder variableTable = Json.createObjectBuilder();
private JsonObjectBuilder error = Json.createObjectBuilder();
private JsonObjectBuilder decision = Json.createObjectBuilder();
private JsonObjectBuilder schema = Json.createObjectBuilder();
private JsonObjectBuilder Terminals = Json.createObjectBuilder();
private VariableTable vtable =  new VariableTable();
private JsonObjectBuilder type = Json.createObjectBuilder();

public VariableTable getVariableTable (){
return vtable ;
}
public boolean forallfalg = false;
String forallvar = null;

public static void main(String[] args) {
    Reader sr = new StringReader(args[0]);
    JsonObjectBuilder js = Json.createObjectBuilder();

    Adil p = new Adil(sr);
    try {
      JsonObjectBuilder node = p.ADILStatement(js);
     System.out.println(node.toString());

    } catch (ParseException pe) {
      pe.printStackTrace();
    }
  }


}

PARSER_END(Adil)
SKIP : {
  " "
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

SKIP:
{
    <WHITESPACE: " " | "\t" | "\r" | "\n">
}

TOKEN : /* Operators */
{
    <GREATERTHANEQUALS: ">" (<WHITESPACE>)* "=">
|    <MINORTHANEQUALS: "<" (<WHITESPACE>)* "=">
|    <NOTEQUALSSTANDARD: "<" (<WHITESPACE>)* ">">
|    <NOTEQUALSBANG: "!" (<WHITESPACE>)* "=">
|    <CONCAT: "|" (<WHITESPACE>)* "|">
}




TOKEN : {
  <DIGITS : (["0"-"9"])+>

  | < PLUS : "+" >
  | <NOT : "!" >
  | <SEMICOLON : ";">
  | <COLON : ":" >
  | < EQAL : "=" >
  | < GREATER : ">">
  | < LESS : "<" >
  | <FBRACKETSTART : "(">
  | <FBRACKETEND : ")">
  | <DOT : ".">
  | <COMMA : ",">
  | <StartSQBracket : "[" >
  | <EndSQBracket   : "]" >
  | <StartCurlyBracket : "{">
  | <EndCurlyBracket : "}">
  | < AT : "@">
  | <OPERATOR : (<WHITESPACE><GREATER>)|(<WHITESPACE><LESS>)|(<WHITESPACE><EQAL>)|<WHITESPACE><GREATERTHANEQUALS>
                                                            |<WHITESPACE><GREATERTHANEQUALS>|<WHITESPACE><MINORTHANEQUALS>
                                                            |<WHITESPACE><NOTEQUALSSTANDARD>|<WHITESPACE><NOTEQUALSBANG>|<WHITESPACE><NOTEQUALSBANG><WHITESPACE><CONCAT>>
  |< MINUS : "-" >
}
TOKEN [IGNORE_CASE]: {
<CREATE : "create" >
| <DELETE : "delete" >
| <ALTER : "alter" >
| <LOAD : "load" >
| <IMPORT : "import">
| <DATASOURCE : "datasource" >
| <WITH : "with">
| <WHERE : "where">
| <AND : "and">
|<OR : "or">
|<STORE : "store">
|<TYPE : "type">
|<PARTITION : "partition" >
|<BY : "by" >
|<AS : "as" >
|<TEMPORALRELATION : "temporalrelation" >
|<TEMPORALGRAPH : "temporalgraph" >
|<ON : "on" >
|<REPORT : "report">
|<ANALYSIS : "analysis">
| <EXECUTE : "execute">
|<EVERY : "every" >
|<PROPERTYGRAPH : "propertygraph">
|<MATRIX : "matrix">
|<INTEGER : "integer">
|<STRING : "string">
|<TEXT : "text">
|<LONG:"long">
|<DOUBLE:"double">
|<HISTOGRAM:"histogram">
|<VIEW : "view" >
|<COLLECTION : "collection" >
| <CONNECTION : "connection">
| <TO : "to" >
| <FROM : "from">
| <LIBRARY : "library" >
| <DICTIONARY : "dictionary" >
| <ONTOLOGY : "ontology" >
| <WITNESS : "witness" >
| <PROJECT : "project" >
| <AWSM : "awsm">
|<NODE : "node">
|<NODES : "nodes">
|<PATH : "path">
|<SELECT : "select" >
|<ORDER : "order">
|<GROUP : "group">
|<USE : "use">
}
TOKEN [IGNORE_CASE]: {
<ENV : "env" >
| <IN : "in">
| <ANNOTATE : "annotate">
| <FILTER : "filter" >
| <EXECUTESQLPP : "executesqlpp" >
| <CONSTRUCTGRAPH : "constructgraph" >
|<CYPHERQUERY : "cypherquery" >
| <EXECUTECYPHER : "executecypher">
| <EXECUTESQL :"executesql">
| <FORALL : "forall">
}
TOKEN :
{
   < DIGIT    : ["0"-"9"] >
 | < #LETTER   : ["a"-"z","A"-"Z"] >
 | < ALPHANUM : (<LETTER>|<DIGITS>)(<LETTER>|<DIGITS>)*>
 |<FIELDNAME : (<ALPHANUM>(<DOT><ALPHANUM>)*)>
 |< QUOTED_IDENTIFIER : "\"" (~["\n","\r","\""])+ "\"" | ("`" (~["\n","\r","`"])+ "`") >
 |<GraphElementType : <COLON><ALPHANUM>>
 |<INPATH : (<MINUS><GREATER>) >
 |<OUTPATH : (<LESS><MINUS>) >

}

JsonObjectBuilder ADILStatement(JsonObjectBuilder jObject)  :
{JsonArrayBuilder sqlPlan = Json.createArrayBuilder(); JsonObjectBuilder tempJB = Json.createObjectBuilder();}
{
 ({JsonObjectBuilder tempjObject = Json.createObjectBuilder(); } tempjObject = Statement(tempjObject) {sqlPlan.add(tempjObject.build());} <SEMICOLON>)*
 {
 tempJB.add("Variable", variableTable.build());
}
 {tempJB.add("error", error.build());}
 {tempJB.add("schema", schema.build());}
 {tempJB.add("Terminals", Terminals.build());}
 {tempJB.add("decision", decision.build());}
 {jObject.add("INFO", tempJB.build());}
 {jObject.add("ADIL", sqlPlan.build());}
 {return jObject; }
}


JsonObjectBuilder Statement(JsonObjectBuilder jObject)  : {Token t;}
{
 ( LOOKAHEAD(1) CreateAnalysis(jObject)| ImportLibrary(jObject) )
 {return jObject; }
}

// USE Database Syntax





JsonObjectBuilder ImportLibrary(JsonObjectBuilder jObject) : {Token t; Token z; JsonArrayBuilder array = Json.createArrayBuilder(); String ltype; JsonObjectBuilder tempjObject = Json.createObjectBuilder();}
{

<IMPORT> (LOOKAHEAD(2)(<LIBRARY> {ltype = "LIBRARY";})|(<DICTIONARY> {ltype = "DICTIONARY";}) |( t = <ONTOLOGY> {ltype="ONTOLOGY";}) ) t= <ALPHANUM>{array.add(t.image);}{variableTable.add(t.image, ltype );}
( <COMMA> t = <ALPHANUM> {array.add(t.image); variableTable.add(t.image,ltype ); Terminals.add(t.image, ltype);})*   <AS> z = <ALPHANUM>{variableTable.add(z.image, t.image);{tempjObject.add("as", z.image);}}
{
JsonObjectBuilder dbjObject = Json.createObjectBuilder();
ImportLibraryDBCheck(dbjObject, z.image, array.build());
tempjObject.add("System", dbjObject.build());
tempjObject.add("type", ltype);
}
{jObject.add("IMPORT", tempjObject.build());}
{return jObject;}
}





JsonObjectBuilder CreateAnalysis(JsonObjectBuilder jObject) : {Token t; Token k; boolean scheduleFlag = true; JsonArrayBuilder array = Json.createArrayBuilder();}
{
  <CREATE> <ANALYSIS> k = <ALPHANUM>{jObject.add("name", k.image); vtable.insertName(k.image);vtable.updateType(k.image, DataTypeEnum.AnalysisVar.ordinal());} <AS> <FBRACKETSTART>
                                          (
                                          {JsonObjectBuilder tempJB = Json.createObjectBuilder();}
                                           (LOOKAHEAD(1)(tempJB =  AssignmentStatement(tempJB))|(ForAllExpression(tempJB)))<SEMICOLON>
                                           {array.add(tempJB.build());}
                                           )*
<FBRACKETEND>
  (<EXECUTE> <EVERY> t = <ALPHANUM>  {scheduleFlag = true;} {jObject.add("SCHEDULED", t.image); } )?

  {jObject.add("UnitAnalysis", array.build());}

   {return jObject; }
}
JsonObjectBuilder AssignmentStatement(JsonObjectBuilder jObject) : {
Token t; Token or; Token gr; Token store ;
JsonObjectBuilder tempJB = Json.createObjectBuilder();
boolean variableArray = false;
JsonArrayBuilder group = Json.createArrayBuilder();
JsonArrayBuilder order = Json.createArrayBuilder();
}
{
    {int n = 0;

    }
    t = <ALPHANUM>{tempJB.add("array", false);tempJB.add("type", "single");  tempJB.add("size",n); variableTable.add(t.image, "val"); vtable.insertName(t.image); vtable.updateType(t.image, DataTypeEnum.Undecided.ordinal());}
                  (

                  <StartSQBracket><EndSQBracket>{tempJB.add("array", true);

                  tempJB.add("type", "list");
                  n = n + 1; tempJB.add("size",n);
                  variableTable.add(t.image, "LIST");
                  vtable.updateType(t.image, DataTypeEnum.Undecided.ordinal());
                  }
                  )*{vtable.addDimention(t.image, n);}
                  <COLON><EQAL>(
                                <FBRACKETSTART>(LOOKAHEAD(4)<PROPERTYGRAPH>{vtable.updateType(t.image, DataTypeEnum.PropertyGraph.ordinal());}
                                                           |<HISTOGRAM>{vtable.updateType(t.image, DataTypeEnum.Histogram.ordinal());}
                                                           |<LONG>{vtable.updateType(t.image, DataTypeEnum.Long.ordinal());}
                                                           |<STRING>{vtable.updateType(t.image, DataTypeEnum.String.ordinal());}
                                                           |<INTEGER>{vtable.updateType(t.image, DataTypeEnum.Integer.ordinal());}
                                                           |<TEXT>{vtable.updateType(t.image, DataTypeEnum.Text.ordinal());}
                                                )
                                   <FBRACKETEND>
                                )?
                    (SelectStament(tempJB)|AWSMFunction(tempJB))
                   (
                        (<ORDER> <BY> or = <ALPHANUM>{ List ovar = new ArrayList(); order.add(or.image); ovar.add(or.image);}(<COMMA>  or = <ALPHANUM> { order.add(or.image); ovar.add(or.image);})?
                        {

                        tempJB.add("ORDER",order.build());
                        vtable.setOrder(ovar);

                        }

                    )?
                        (
                            <GROUP> <BY> gr = <ALPHANUM>{ group.add(gr.image);}(<COMMA> gr = <ALPHANUM> { group.add(gr.image);})* {tempJB.add("GROUP",group.build());}
                        )?
                        (
                            <STORE> <AS> store = <ALPHANUM>{tempJB.add("STORE", true); tempJB.add("STORAGE", store.image);}
                        )?
                        (

                        RetrunStatement(tempJB)

                        )?

                   )
    {
        jObject.add("ASSN", tempJB.build());
        jObject.add("name",t.image);
        return jObject;
    }
}

JosonObject RetrunStatement(JsonObjectBuilder jobject) : {
Token t;
JsonObjectBuilder tempJB = Json.createObjectBuilder();

}
{
<RETURN> <AS> <FBRACKETSTART>PropertyGraph() <FBRACKETEND>
}

JosonObject Graph(JsonObjectBuilder jobject) : {
Token t;
JsonArrayBuilder tempArray = Json.createArrayBuilder();
JsonObjectBuilder tempJA = Json.createObjectBuilder();

}
{
        GRAPHNODE(tempJA){tempArray.add(tempJA.build());}
        (

        {JsonObjectBuilder tempJB = Json.createObjectBuilder();}GRAPHEDGE(tempJB){tempArray.add(tempJB.build());}

        {JsonObjectBuilder tempJC = Json.createObjectBuilder();}
        GRAPHNODE(tempJC){tempArray.add(tempJC.build());}

        )+
        {jobject.add("cypher",tempArray.build());}
}

JosonObject GRAPHNODE(JsonArrayBuilder jobject) : {
Token t; Token k;
JsonObjectBuilder tempJB = Json.createObjectBuilder();
}
{
(<FBRACKETSTART>
            (t = <ALPHANUM>| t = <FIELDNAME>)<COLON> k = <ALPHANUM>
<FBRACKETEND>)

{tempJB.add("nodeName", t.image);
tempJB.add("nodeType",s.image);
jobject.add(tempJB.build());
return jobject;
}
}

JsonObject GRAPHEDGE(JsonArrayBuilder jobject):{Token t; Token k; Token s;}{

{JsonObjectBuilder tempJB = Json.createObjectBuilder();

}
<MINUS><StartSQBracket>
    t = <ALPHANUM><COLON> s = <ALPHANUM>
<EndSQBracket><MINUS>
{
tempJB.add("edgeName", t.image);
tempJB.add("edgeType",s.image);
jobject.add(tempJB.build());
return jobject;
}
}


JsonObjectBuilder DeclareAnalysis(JsonObjectBuilder jObject) : {
Token t;
JsonObjectBuilder tempJB = Json.createObjectBuilder();
boolean variableArray = false;
}
{
{int n = 0;}
 t = <ALPHANUM>
  (
            <StartSQBracket><EndSQBracket>
            {
            n = n + 1;}
  )?
{
            variableArray = true;
            tempJB.add("list", "true");

}
{return tempJB;}
}
//SELECT Statement of ADIL 1.0
JsonObjectBuilder SelectStament(JsonObjectBuilder jObject) : {Token t, tuple, db; JsonObjectBuilder tempJB = Json.createObjectBuilder(); boolean variableArray = false ;
JsonArrayBuilder tempTuple = Json.createArrayBuilder();JsonArrayBuilder tempDB = Json.createArrayBuilder();}
{
{
int tu = 0;
int src = 1;
}
        <SELECT> tuple = <ALPHANUM> { tempTuple.add(tuple.image); vtable.insertName(tuple.image); vtable.updateType(tuple.image, DataTypeEnum.Undecided.ordinal());}
        (
                                                 <COMMA> tuple =<ALPHANUM>
                                                            {tempTuple.add(tuple.image);
                                                             tu = tu + 1; vtable.insertName(tuple.image); vtable.updateType(tuple.image, DataTypeEnum.Undecided.ordinal());}
         )*
                                                            <FROM> db = <ALPHANUM>
                                                            {
                                                                tempDB.add(db.image);
                                                                vtable.insertName(tuple.image);
                                                                vtable.updateType(tuple.image, DataTypeEnum.Undecided.ordinal());

                                                            }
                                                            (<COMMA> db =<ALPHANUM> { tempDB.add(db.image); src = src + 1; })?
                                                            <WHERE>
                                                            (
                                                            {
                                                            JsonObjectBuilder pred = Json.createObjectBuilder();
                                                            }
                                                                Expression(pred)
                                                            {
                                                                tempJB.add("PREDICATE", pred.build());
                                                            }
                                                            )?
{
if(tuple.image != "*"){
    tempJB.add("tuple", tempTuple.build());
    tempJB.add("source", tempDB.build());
}

JsonObject source = tempJB.build();
if(src>1){
jObject.add("JOIN", source);
}
else {
jObject.add("SELECT", source);
}
return jObject;

}

}

// AWESOME FUNCTION Statement ADIL 1.0

JsonObjectBuilder AWSMFunction(JsonObjectBuilder l): {Token t; JsonArrayBuilder l1 = Json.createArrayBuilder();JsonObjectBuilder tempJB = Json.createObjectBuilder();}
{
t = <ALPHANUM>GetFunction(l1, t.image)(
                                                                            <WHERE>
                                                                                   (
                                                                                                   {
                                                                                                   JsonObjectBuilder pred = Json.createObjectBuilder();
                                                                                                   }
                                                                                                       Expression(pred)
                                                                                                   {
                                                                                                       tempJB.add("PREDICATE", pred.build());
                                                                                                   }
                                                                                   )
                                      )?

{
    tempJB.add("func", l1.build());
    l.add("awsmfunc", tempJB.build());
    return l;
}
}
// FOR ALL ADIL 1.0
JsonObjectBuilder ForAllExpression(JsonObjectBuilder l):
{
    Token t, col,partVar;

    JsonObjectBuilder tempJB = Json.createObjectBuilder();
    JsonArrayBuilder array = Json.createArrayBuilder();
}
{
<FORALL> t = <ALPHANUM> <COLON> col = <ALPHANUM>
             (
                     (
                                 <StartSQBracket>
                                 {
                                           JsonObjectBuilder pred = Json.createObjectBuilder();
                                 }
                                  Expression(pred)
                                            {
                                               tempJB.add("PREDICATE", pred.build());
                                            }
                                 <EndSQBracket>
                     )
                     |
                     (  <PARTITION> <ON> partVar = <ALPHANUM> ){tempJB.add("partfield",partVar.image);}

             )?
             (<StartCurlyBracket>


                                                        (
                                                        ({JsonObjectBuilder tempx = Json.createObjectBuilder();} AssignmentStatement(tempx)<SEMICOLON>{array.add(tempx.build());})
                                                        |({JsonObjectBuilder tempy = Json.createObjectBuilder();}ForAllExpression(tempy)<SEMICOLON>{array.add(tempy.build());})
                                                        )*

              <EndCurlyBracket>
              )

{
tempJB.add("var", t.image);
tempJB.add("source", col.image);
tempJB.add("in", array.build());
int length = 10;
boolean useLetters = true;
boolean useNumbers = false;
String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);
l.add("name", col.image+":ForAll");
l.add("lid",generatedString);

l.add("FORALL", tempJB.build());

}
{return l;}

}

JsonObjectBuilder Expression(JsonObjectBuilder l) :
{
    Token t;
    List x; List y;
    Token o1; Token opn; Token o2;
    JsonObjectBuilder m  =Json.createObjectBuilder();
    JsonArrayBuilder l1 = Json.createArrayBuilder();
    JsonArrayBuilder k  =Json.createArrayBuilder();

}
{(o1 = <ALPHANUM>{m.add("op1", 0); k.add(o1.image);}
                                    (GetFunction(l1, o1.image))?{m.add("op1", 3); l.add(o1.image,l1.build());}) opn = <OPERATOR>{k.add(opn.image);}
                                                        (t = <ALPHANUM>{m.add("op2", 0);}|t = <DIGITS>{m.add("op2", 1);})
                                                                            {k.add(t.image);}
                                                                            (GetFunction(l1, t.image){

                                                                            m.add("op2", 3);

                                                                            l.add(t.image,l1.build());}

                                                                            )?
{ l.add("ops", opn.image);
l.add("desc", m.build());
l.add("val", k.build());
return l;}
}
JsonArrayBuilder GetFunction(JsonArrayBuilder l, String name) : {Token T; Token x; Token y; JsonArrayBuilder l1 = Json.createArrayBuilder();}
{
<FBRACKETSTART>
{

JsonObjectBuilder f1 = Json.createObjectBuilder();
JsonObjectBuilder map = Json.createObjectBuilder();
JsonObject funcProp = ParserUtil.validateFunction(name);
l.add(funcProp);
}
            (

                LOOKAHEAD(3)(x = <ALPHANUM>{f1.add("vp1",x.image);} (GetFunction(l, x.image) {f1.add(x.image,l.build());})? (<EQAL> y = <ALPHANUM>{map.add(x.image, y.image); f1.add("map", map.build());})? )
                |(x = <DIGITS>{f1.add("digi1",x.image);})
                |(x = <FIELDNAME>{f1.add("vpt1",x.image);}(GetFunction(l, x.image){f1.add(x.image,l.build());})?(<EQAL> y = <ALPHANUM>{map.add(x.image, y.image); f1.add("map",map.build());})?)

            )

            {l1.add(f1.build());}
            (
 {JsonObjectBuilder f2 = Json.createObjectBuilder();JsonObjectBuilder m2 = Json.createObjectBuilder();}
                  <COMMA> ( LOOKAHEAD(3)(x = <ALPHANUM>{f2.add("vp1",x.image);} (GetFunction(l, x.image) {f2.add(x.image,l.build());})? (<EQAL> y = <ALPHANUM>{m2.add(x.image, y.image); f2.add("map", m2.build());})? )
                            |(x = <DIGITS>{f2.add("digi1",x.image);})
                            |(x = <FIELDNAME>{f2.add("vpt1",x.image);}(GetFunction(l, x.image){f2.add(x.image,l.build());})?(<EQAL> y = <ALPHANUM>{m2.add(x.image, y.image); f2.add("map",m2.build());})?)
                            )

              {l1.add(f2.build());})?
<FBRACKETEND>

 {
 l.add(l1.build());}
{return l;}
}


