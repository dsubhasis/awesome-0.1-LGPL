/* Generated By:JJTree&JavaCC: Do not edit this line. AdilTokenManager.java */
package edu.sdsc.adil;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import javax.json.*;
import edu.sdsc.awesome.adil.parser.ParserTable.VariableTable;
import edu.sdsc.awesome.adil.parser.ParserTable.VariableTableEntry;
import edu.sdsc.awesome.adil.parser.ParserTable.DataTypeEnum;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.ImportLibraryDBCheck;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleCypherQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleSQLQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.*;
import edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil;
import edu.sdsc.awesome.adil.parser.StatementOperation.SelectFunction;
import edu.sdsc.awesome.adil.parser.ParserTable.VariableTable;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.ImportLibraryDBCheck;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleCypherQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleSQLQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.*;
import edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil;
import org.apache.commons.lang.RandomStringUtils;

/** Token Manager. */
public class AdilTokenManager implements AdilConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 14;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 20;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 22;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 13;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 24;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 31;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 23;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 16;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 15;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 19;
         return jjMoveNfa_0(0, 0);
      case 61:
         jjmatchedKind = 17;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 18;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 29;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x8410400000000L, 0x1000100L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8000000100000000L, 0x18020001L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1000002200000000L, 0x10L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x64400000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x82000004L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x44000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x100001000000000L, 0x800000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x800000800000000L, 0x8L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x2020000000000L, 0x2020L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x40100000000000L, 0x880L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x10000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x200040000000000L, 0x201000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x401880000000000L, 0x2L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x40L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 91:
         jjmatchedKind = 25;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 26;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8410400000000L, 0x1000100L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000100000000L, 0x18020001L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000002200000000L, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x64400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x82000004L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x44000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100001000000000L, 0x800000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000800000000L, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2020000000000L, 0x2020L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40100000000000L, 0x880L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000200000L, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200040000000000L, 0x201000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x401880000000000L, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 123:
         jjmatchedKind = 27;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 28;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x80102000000000L, active1, 0x800L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x405800200000000L, active1, 0x11000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000004000000000L, active1, 0x2000058L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x100000L);
      case 78:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x108010000000000L, active1, 0x1400020L);
      case 79:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x9800000800000000L, active1, 0x88000601L);
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000100000000L, active1, 0x46084L);
      case 83:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa8000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x200040000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x64000000L);
      case 89:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80102000000000L, active1, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x405800200200000L, active1, 0x11000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000004000000000L, active1, 0x2000058L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x108010000000000L, active1, 0x1400020L);
      case 111:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x9800000800000000L, active1, 0x88000601L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000100000000L, active1, 0x46084L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa8000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200040000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x64000000L);
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x10000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000800000000L, active1, 0x40000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 68:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2600L);
      case 69:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4030008100000000L, active1, 0x64000000L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 76:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000200000000L, active1, 0x2011000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x9000001L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x40040000000000L, active1, 0x84084L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x4081000000000L, active1, 0x10000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x200100000000000L, active1, 0x80000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x100L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x180006400000000L, active1, 0x860L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 86:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 2;
         }
         break;
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000800000000L, active1, 0x40000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2600L);
      case 101:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4030008100000000L, active1, 0x64000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 108:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000200000000L, active1, 0x2011000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x9000001L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40040000000000L, active1, 0x84084L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4081000000000L, active1, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200100000000000L, active1, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x180006400200000L, active1, 0x860L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 118:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 2;
         }
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x2100000000L, active1, 0x80010000L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x64000000L);
      case 68:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000600000000L, active1, 0x203400L);
      case 71:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         break;
      case 72:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 74:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x8008000000000000L, active1, 0L);
      case 77:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 3;
         }
         break;
      case 78:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x41L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4001000000000L, active1, 0x1000020L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x41800000000000L, active1, 0x40000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0048000000000L, active1, 0x8L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L);
      case 84:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000100000000000L, active1, 0x2000010L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      case 87:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2100000000L, active1, 0x80010000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x64000000L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000600000000L, active1, 0x203400L);
      case 103:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         break;
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8008000000000000L, active1, 0L);
      case 109:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x41L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4001000000000L, active1, 0x1000020L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x41800000000000L, active1, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0048000000000L, active1, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000100000000000L, active1, 0x2000010L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x4000L);
      case 119:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8040000000000000L, active1, 0x120000c1L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x80100000000000L, active1, 0x10L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x80000020L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x2001800000000000L, active1, 0L);
      case 80:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         break;
      case 82:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4001000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x300000000L, active1, 0x9010000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x64000000L);
      case 89:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8040000000000000L, active1, 0x120000c1L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80100000000000L, active1, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x80000020L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2001800000000000L, active1, 0L);
      case 112:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4001000200000L, active1, 0L);
      case 115:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x300000000L, active1, 0x9010000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x64000000L);
      case 121:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x81L);
      case 69:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 71:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      case 76:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x30L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 82:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x41800000000000L, active1, 0x18000008L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x40L);
      case 84:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10100000000000L, active1, 0x64000000L);
      case 88:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x81L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      case 108:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 5;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x30L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 114:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x41800000000000L, active1, 0x18000008L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x40L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10100000000000L, active1, 0x64000000L);
      case 120:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x64000000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x8100000000000L, active1, 0L);
      case 76:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 81:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L);
      case 82:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8040000000000000L, active1, 0x1000001L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x8000000L);
      case 89:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x64000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8100000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8040000000000000L, active1, 0x1000001L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x8000000L);
      case 121:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x10L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x28000000L);
      case 69:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x1800000000000L, active1, 0L);
      case 78:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 7;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x44000000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L);
      case 89:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x28000000L);
      case 101:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x1800000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 7;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x44000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L);
      case 121:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000L);
      case 71:
         return jjMoveStringLiteralDfa9_0(active0, 0x41000000000000L, active1, 0L);
      case 77:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 8;
         }
         break;
      case 78:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 81:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x44000000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0x10L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x41000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 8;
         }
         break;
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x44000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000L);
      case 76:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      case 78:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 9;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x41000000000000L, active1, 0x10000000L);
      case 89:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 9;
         }
         break;
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000L);
      case 108:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 9;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x41000000000000L, active1, 0x10000000L);
      case 121:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x41000000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000L);
      case 89:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 10;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x41000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000L);
      case 121:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0x8000000L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000L);
      case 80:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x41000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000L);
      case 112:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x41000000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 72:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 12;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000L);
      case 82:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 12;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 12;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000L);
      case 114:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 12;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 72:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 13;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 13;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 15;
         }
         break;
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 15;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 77;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(0, 5);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddStates(6, 14);
                  }
                  else if (curChar == 60)
                     jjCheckNAddStates(15, 19);
                  else if (curChar == 47)
                     jjAddStates(20, 21);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 34)
                     jjCheckNAdd(17);
                  else if (curChar == 40)
                     jjCheckNAdd(10);
                  else if (curChar == 33)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 61 && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 61 && kind > 10)
                     kind = 10;
                  break;
               case 7:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 9:
                  if (curChar == 40)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 36);
                  break;
               case 15:
                  if (curChar == 41 && kind > 100)
                     kind = 100;
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 34 && kind > 101)
                     kind = 101;
                  break;
               case 20:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 22:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if (curChar == 62 && kind > 102)
                     kind = 102;
                  break;
               case 24:
                  if (curChar == 47)
                     jjAddStates(20, 21);
                  break;
               case 25:
                  if (curChar == 47)
                     jjCheckNAddStates(39, 41);
                  break;
               case 26:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 27:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 28:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 29:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 31:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 42)
                     jjAddStates(42, 43);
                  break;
               case 33:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 32);
                  break;
               case 34:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 32);
                  break;
               case 35:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 36:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(6, 14);
                  break;
               case 37:
                  if (curChar == 62 && kind > 30)
                     kind = 30;
                  break;
               case 38:
                  if (curChar == 60 && kind > 30)
                     kind = 30;
                  break;
               case 39:
                  if (curChar == 61 && kind > 30)
                     kind = 30;
                  break;
               case 40:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(41, 39);
                  break;
               case 41:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(41, 39);
                  break;
               case 42:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(43, 39);
                  break;
               case 43:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(43, 39);
                  break;
               case 44:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(45, 39);
                  break;
               case 45:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(45, 39);
                  break;
               case 46:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(47, 37);
                  break;
               case 47:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(47, 37);
                  break;
               case 48:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(49, 39);
                  break;
               case 49:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(49, 39);
                  break;
               case 50:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 51:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x100002600L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 55:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 57:
                  if (curChar == 60)
                     jjCheckNAddStates(15, 19);
                  break;
               case 58:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 61 && kind > 8)
                     kind = 8;
                  break;
               case 60:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 62 && kind > 9)
                     kind = 9;
                  break;
               case 62:
                  if (curChar == 45 && kind > 103)
                     kind = 103;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(0, 5);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(64);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddTwoStates(65, 66);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(46, 48);
                  break;
               case 69:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(70, 72);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(49, 51);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(52, 54);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(55, 58);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(59, 62);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddStates(63, 65);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAddStates(66, 70);
                  }
                  else if (curChar == 96)
                     jjCheckNAdd(20);
                  else if (curChar == 124)
                     jjAddStates(22, 23);
                  break;
               case 6:
                  if (curChar == 124)
                     jjAddStates(22, 23);
                  break;
               case 8:
                  if (curChar == 124 && kind > 11)
                     kind = 11;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(27, 29);
                  break;
               case 17:
                  jjAddStates(71, 72);
                  break;
               case 19:
                  if (curChar == 96)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 96 && kind > 101)
                     kind = 101;
                  break;
               case 26:
                  jjAddStates(39, 41);
                  break;
               case 31:
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
               case 34:
                  jjCheckNAddTwoStates(34, 32);
                  break;
               case 54:
                  if (curChar == 124)
                     jjAddStates(44, 45);
                  break;
               case 56:
                  if (curChar == 124 && kind > 30)
                     kind = 30;
                  break;
               case 65:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(46, 48);
                  break;
               case 70:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(49, 51);
                  break;
               case 76:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddStates(66, 70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(39, 41);
                  break;
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(34, 32);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 77 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   64, 65, 67, 69, 74, 75, 37, 38, 39, 40, 42, 44, 46, 48, 50, 58, 
   59, 60, 61, 62, 25, 30, 7, 8, 11, 13, 15, 11, 12, 10, 11, 10, 
   14, 11, 12, 10, 14, 20, 21, 26, 27, 29, 33, 35, 55, 56, 67, 68, 
   69, 69, 70, 71, 69, 70, 73, 69, 70, 71, 73, 67, 68, 69, 74, 65, 
   66, 75, 65, 66, 67, 68, 69, 17, 18, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\53", "\41", "\73", "\72", "\75", "\76", "\74", "\50", "\162\145\164\165\162\156", 
"\51", "\56", "\54", "\133", "\135", "\173", "\175", "\100", null, "\55", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xfdffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[77];
private final int[] jjstateSet = new int[154];
protected char curChar;
/** Constructor. */
public AdilTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AdilTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 77; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
