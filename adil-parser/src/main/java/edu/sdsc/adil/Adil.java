/* Generated By:JJTree&JavaCC: Do not edit this line. Adil.java */
package edu.sdsc.adil;

import java.io.*;
import java.util.*;
import edu.sdsc.awesome.adil.parser.AdilFirstPass;
import edu.sdsc.awesome.adil.parser.ParserTable.Table;
import javax.json.Json;
import javax.json.JsonObjectBuilder;
import javax.json.JsonObject;
import javax.json.JsonArrayBuilder;
import java.util.ArrayList;
import java.util.List;




import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.ImportLibraryDBCheck;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleCypherQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleSQLPPQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.*;


public class Adil/*@bgen(jjtree)*/implements AdilTreeConstants, AdilConstants {/*@bgen(jjtree)*/
  protected JJTAdilState jjtree = new JJTAdilState();
private static Integer planID = edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.generateUniqueID();

private JsonObjectBuilder variableTable = Json.createObjectBuilder();
private JsonObjectBuilder error = Json.createObjectBuilder();
private JsonObjectBuilder decision = Json.createObjectBuilder();
private JsonObjectBuilder schema = Json.createObjectBuilder();
private JsonObjectBuilder type = Json.createObjectBuilder();


public static void main(String[] args) {
    Reader sr = new StringReader(args[0]);
    JsonObjectBuilder js = Json.createObjectBuilder();
    Adil p = new Adil(sr);
    try {
      JsonObjectBuilder node = p.ADILStatement(js);
     System.out.println(node.toString());

    } catch (ParseException pe) {
      pe.printStackTrace();
    }
  }

  final public JsonObjectBuilder ADILStatement(JsonObjectBuilder jObject) throws ParseException {
 /*@bgen(jjtree) ADILStatement */
 ASTADILStatement jjtn000 = new ASTADILStatement(JJTADILSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);JsonArrayBuilder sqlPlan = Json.createArrayBuilder(); JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CREATE:
        case IMPORT:
        case ALPHANUM:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
   JsonObjectBuilder tempjObject = Json.createObjectBuilder();
        tempjObject = Statement(tempjObject);
                                                                                                       sqlPlan.add(tempjObject.build());
        jj_consume_token(SEMICOLON);
      }
  tempJB.add("Variable", variableTable.build());
  tempJB.add("error", error.build());
  tempJB.add("schema", schema.build());
  tempJB.add("type", type.build());
  tempJB.add("decision", decision.build());
  jObject.add("INFO", tempJB.build());
  jObject.add("ADIL", sqlPlan.build());
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return jObject;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder Statement(JsonObjectBuilder jObject) throws ParseException {
                                                           /*@bgen(jjtree) Statement */
                                                           ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_1(2)) {
        CreateStatement(jObject);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHANUM:
          DeclareAnalysis(jObject);
          break;
        case IMPORT:
          ImportLibrary(jObject);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder ImportLibrary(JsonObjectBuilder jObject) throws ParseException {
                                                              /*@bgen(jjtree) ImportLibrary */
                                                              ASTImportLibrary jjtn000 = new ASTImportLibrary(JJTIMPORTLIBRARY);
                                                              boolean jjtc000 = true;
                                                              jjtree.openNodeScope(jjtn000);Token t; Token z; JsonArrayBuilder array = Json.createArrayBuilder(); String ltype; JsonObjectBuilder tempjObject = Json.createObjectBuilder();
    try {
      jj_consume_token(IMPORT);
      if (jj_2_2(2)) {
        jj_consume_token(LIBRARY);
                                  ltype = "LIBRARY";
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DICTIONARY:
          jj_consume_token(DICTIONARY);
                                                                      ltype = "DICTIONARY";
          break;
        case ONTOLOGY:
          t = jj_consume_token(ONTOLOGY);
                                                                                                                 ltype="ONTOLOGY";
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t = jj_consume_token(ALPHANUM);
                                                                                                                                                    array.add(t.image);
                                                                                                                                                                         variableTable.add(t.image, ltype );
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ALPHANUM);
                                                                                                                                                                                                                                       array.add(t.image); variableTable.add(t.image,ltype );
      }
      jj_consume_token(FROM);
      z = jj_consume_token(FIELDNAME);
                                                                                                                                                                                                                                                                                                                          variableTable.add(z.image, "Source" );
 JsonObjectBuilder dbjObject = Json.createObjectBuilder(); ImportLibraryDBCheck(dbjObject, z.image, array.build()); {tempjObject.add("System", dbjObject.build());}
 tempjObject.add("type", ltype);
 tempjObject.add("FROM", z.image);
 jObject.add("IMPORT", tempjObject.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder CreateStatement(JsonObjectBuilder jObject) throws ParseException {
                                                                /*@bgen(jjtree) CreateStatement */
                                                                ASTCreateStatement jjtn000 = new ASTCreateStatement(JJTCREATESTATEMENT);
                                                                boolean jjtc000 = true;
                                                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(CREATE);
      if (jj_2_3(3)) {
        CreateDataSOURCE(jObject);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENV:
          CreatEnvironment(jObject);
          break;
        case ANALYSIS:
          CreateAnalysis(jObject);
          break;
        case CONNECTION:
          ConnectDataSRC(jObject);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder CreateAnalysis(JsonObjectBuilder jObject) throws ParseException {
                                                               /*@bgen(jjtree) CreateAnalysis */
                                                               ASTCreateAnalysis jjtn000 = new ASTCreateAnalysis(JJTCREATEANALYSIS);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);Token t; Token k; boolean scheduleFlag = true; JsonArrayBuilder array = Json.createArrayBuilder();
    try {
      jj_consume_token(ANALYSIS);
      k = jj_consume_token(ALPHANUM);
      jj_consume_token(AS);
      jj_consume_token(FBRACKETSTART);
                                                   JsonObjectBuilder tempJB = Json.createObjectBuilder();
      tempJB = DeclareAnalysis(tempJB);
                                                                             array.add(tempJB.build());
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
     JsonObjectBuilder tempJC = Json.createObjectBuilder();
        jj_consume_token(COMMA);
        tempJC = DeclareAnalysis(tempJC);
                                                                                                        array.add(tempJC.build());
      }
      jj_consume_token(FBRACKETEND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXECUTE:
        jj_consume_token(EXECUTE);
        jj_consume_token(EVERY);
        t = jj_consume_token(ALPHANUM);
                                      scheduleFlag = true;
                                                             jObject.add("SCHEDULED", t.image);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
   jObject.add("UnitAnalysis", array.build());
   {jObject.add("name", k.image);}
   type.add(k.image, "analysisFunction" );
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return jObject;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder DeclareAnalysis(JsonObjectBuilder jObject) throws ParseException {
                                                                /*@bgen(jjtree) DeclareAnalysis */
                                                                ASTDeclareAnalysis jjtn000 = new ASTDeclareAnalysis(JJTDECLAREANALYSIS);
                                                                boolean jjtc000 = true;
                                                                jjtree.openNodeScope(jjtn000);Token t; JsonObjectBuilder tempJB = Json.createObjectBuilder(); boolean variableArray = false;
    try {
      t = jj_consume_token(ALPHANUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case StartSQBracket:
        jj_consume_token(StartSQBracket);
        jj_consume_token(EndSQBracket);
                                                variableArray = true; tempJB.add("Type", "array"); int n = 1;
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case StartSQBracket:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          jj_consume_token(StartSQBracket);
          jj_consume_token(EndSQBracket);
                                 n++;
        }
                                          tempJB.add("ArraySize", n);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(COLON);
      jj_consume_token(EQAL);
      tempJB = AnalysisStatement(tempJB);
  jObject.add("plan", tempJB);
  jObject.add("AnalysisVariable", t.image);
  type.add(t.image, "analysisVariable" );
  decision.add(t.image, false );
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder AnalysisStatement(JsonObjectBuilder jObject) throws ParseException {
                                                                  /*@bgen(jjtree) AnalysisStatement */
                                                                  ASTAnalysisStatement jjtn000 = new ASTAnalysisStatement(JJTANALYSISSTATEMENT);
                                                                  boolean jjtc000 = true;
                                                                  jjtree.openNodeScope(jjtn000);Token t; JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELDNAME:
        UserDefinedFunction(tempJB);
        break;
      case AWSM:
        AwsmDefinedFunction(tempJB);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STORE:
        jj_consume_token(STORE);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELDNAME:
        t = jj_consume_token(FIELDNAME);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder AwsmDefinedFunction(JsonObjectBuilder jObject) throws ParseException {
                                                                                       /*@bgen(jjtree) JsonObjectBuilder */
                                                                                       ASTJsonObjectBuilder jjtn000 = new ASTJsonObjectBuilder(JJTJSONOBJECTBUILDER);
                                                                                       boolean jjtc000 = true;
                                                                                       jjtree.openNodeScope(jjtn000);Token t; Token t2; JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      jj_consume_token(AWSM);
      jj_consume_token(COLON);
      jj_consume_token(ALPHANUM);
      jj_consume_token(FBRACKETSTART);
      AwesomeSafeFunction(tempJB);
      jj_consume_token(FBRACKETEND);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     System.out.println("xxxxxx");{if (true) return jObject;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder UserDefinedFunction(JsonObjectBuilder jObject) throws ParseException {
                                                                    /*@bgen(jjtree) UserDefinedFunction */
                                                                    ASTUserDefinedFunction jjtn000 = new ASTUserDefinedFunction(JJTUSERDEFINEDFUNCTION);
                                                                    boolean jjtc000 = true;
                                                                    jjtree.openNodeScope(jjtn000);Token t0; Token t1; Token t2; JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      t1 = jj_consume_token(FIELDNAME);
      jj_consume_token(FBRACKETSTART);
      function(tempJB);
      jj_consume_token(FBRACKETEND);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return tempJB;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

/* awesome safe functions are read functions and awesome specific update functions
*
*/
  final public JsonObjectBuilder AwesomeSafeFunction(JsonObjectBuilder jObject) throws ParseException {
                                                                                       /*@bgen(jjtree) JsonObjectBuilder */
                                                                                       ASTJsonObjectBuilder jjtn000 = new ASTJsonObjectBuilder(JJTJSONOBJECTBUILDER);
                                                                                       boolean jjtc000 = true;
                                                                                       jjtree.openNodeScope(jjtn000);Token t0; Token t1; Token t2; JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      if (jj_2_4(6)) {
        AnnotateWithStoreOperation(tempJB);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                        jObject.add("annotation", tempJB.build());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXECUTESQLPP:
          ExecuteSQLPP(tempJB);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jObject.add("SQLPP", tempJB.build());
          break;
        case EXECUTECYPHER:
          executeCypher(tempJB);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jObject.add("graph", tempJB.build());
          break;
        case CREATE:
          CreateView(tempJB);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jObject.add("view", tempJB.build());
          break;
        case FILTER:
          FilterOperation(tempJB);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jObject.add("filter", tempJB.build());
          break;
        case PROJECT:
          ProjectFunction(tempJB);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jObject.add("PROJECT", tempJB.build());
          break;
        case REPORT:
          ReportAnalysis(tempJB);
                             jObject.add("report", tempJB.build());
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return jObject;}
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder CreateView(JsonObjectBuilder jObject) throws ParseException {
                                                           /*@bgen(jjtree) CreateView */
                                                           ASTCreateView jjtn000 = new ASTCreateView(JJTCREATEVIEW);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);boolean variableArray = false;Token t; JsonArrayBuilder array  =Json.createArrayBuilder();JsonObjectBuilder tempJB = Json.createObjectBuilder(); JsonObjectBuilder tempJC = Json.createObjectBuilder(); Token x;Token type; Token p;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(VIEW);
      jj_consume_token(FBRACKETSTART);
      jj_consume_token(COLLECTION);
      jj_consume_token(COLON);
      jj_consume_token(EQAL);
      tempJB = AnalysisStatement(tempJB);
      jj_consume_token(COMMA);
      jj_consume_token(VIEW);
      jj_consume_token(COLON);
      jj_consume_token(EQAL);
      tempJC = AnalysisStatement(tempJC);
      jj_consume_token(FBRACKETEND);
  jObject.add("COLLECTION", tempJB.build());
  jObject.add("VIEW", tempJC.build());
  jObject.add("type", "PropertyGRAPH");
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder ProjectFunction(JsonObjectBuilder jObject) throws ParseException {
                                                                /*@bgen(jjtree) ProjectFunction */
                                                                ASTProjectFunction jjtn000 = new ASTProjectFunction(JJTPROJECTFUNCTION);
                                                                boolean jjtc000 = true;
                                                                jjtree.openNodeScope(jjtn000);Token t0; JsonObjectBuilder functionObject = Json.createObjectBuilder();
    try {
      jj_consume_token(PROJECT);
      function(functionObject);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder ReportAnalysis(JsonObjectBuilder jObject) throws ParseException {
                                                               /*@bgen(jjtree) ReportAnalysis */
                                                               ASTReportAnalysis jjtn000 = new ASTReportAnalysis(JJTREPORTANALYSIS);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);Token t; JsonArrayBuilder array  =Json.createArrayBuilder(); Token x;Token type; Token p; JsonObjectBuilder annotateInfo = Json.createObjectBuilder();
    try {
      jj_consume_token(REPORT);
      x = jj_consume_token(ALPHANUM);
      jj_consume_token(FBRACKETSTART);
      t = jj_consume_token(ALPHANUM);
                                                      array.add(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        t = jj_consume_token(ALPHANUM);
                                                                                                   array.add(t.image);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(FBRACKETEND);
      jj_consume_token(AS);
      type = jj_consume_token(ALPHANUM);
      jj_consume_token(STORE);
      p = jj_consume_token(ALPHANUM);
 annotateInfo = functionCheck(annotateInfo, x.image);
 jObject.add("ARCHIVE", p.image);
 jObject.add("variable", array.build());
 jObject.add("TYPE", type.image);
 jObject.add("ReportVariable", x.image);
 jObject.add("info", annotateInfo.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder FunctionAnalysis(JsonObjectBuilder jObject) throws ParseException {
                                                                 /*@bgen(jjtree) FunctionAnalysis */
                                                                 ASTFunctionAnalysis jjtn000 = new ASTFunctionAnalysis(JJTFUNCTIONANALYSIS);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);JsonObjectBuilder functionInfo = Json.createObjectBuilder();Token t; Token x; Token p;JsonArrayBuilder array  =Json.createArrayBuilder(); Token temporalVar; Token temporalField; Token temporalFunction; JsonObjectBuilder temporalJB = Json.createObjectBuilder(); JsonObjectBuilder annotateInfo = Json.createObjectBuilder(); boolean temporalFlag = false; boolean storeFlag = false;
    try {
      functionInfo = function(functionInfo);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STORE:
        jj_consume_token(STORE);
                                                   storeFlag = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
                                                                               String temporalType;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TEMPORALRELATION:
            jj_consume_token(TEMPORALRELATION);
                                                                                                                                      temporalType = "relational";
            break;
          case TEMPORALGRAPH:
            jj_consume_token(TEMPORALGRAPH);
                                                                                                                                                                                      temporalType = "graph";
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(ON);
          temporalField = jj_consume_token(FIELDNAME);
                                                                                                                                   jObject.add("Field", temporalField.image); temporalFlag = true;
          jj_consume_token(AS);
          p = jj_consume_token(ALPHANUM);
                                                                                                                                                                                                                         jObject.add("AS", p.image); jObject.add("TemporalType", temporalType);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
 jObject.add("STORE", storeFlag);
 jObject.add("Temporal", temporalFlag);
 jObject.add("component", functionInfo.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder ExecuteSQLPP(JsonObjectBuilder jObject) throws ParseException {
                                                             /*@bgen(jjtree) ExecuteSQLPP */
                                                             ASTExecuteSQLPP jjtn000 = new ASTExecuteSQLPP(JJTEXECUTESQLPP);
                                                             boolean jjtc000 = true;
                                                             jjtree.openNodeScope(jjtn000);Token t; Token var; JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      jj_consume_token(EXECUTESQLPP);
      jj_consume_token(FBRACKETSTART);
      t = quetedStatement();
      jj_consume_token(FBRACKETEND);
   tempJB = handleSQLPPQuery(t.image, tempJB);
   jObject.add("execute", tempJB);
    jjtn000.setImage(t.image);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return jObject;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder executeCypher(JsonObjectBuilder jObject) throws ParseException {
                                                              /*@bgen(jjtree) executeCypher */
                                                              ASTexecuteCypher jjtn000 = new ASTexecuteCypher(JJTEXECUTECYPHER);
                                                              boolean jjtc000 = true;
                                                              jjtree.openNodeScope(jjtn000);Token source; Token t; Token var; JsonObjectBuilder tempJB = Json.createObjectBuilder(); Token partitionVar;Token partitionField; Token partitionFunction; JsonObjectBuilder partitionJB = Json.createObjectBuilder(); boolean partitionFlag = false;
    try {
      jj_consume_token(EXECUTECYPHER);
      jj_consume_token(FBRACKETSTART);
      t = quetedStatement();
      jj_consume_token(FBRACKETEND);
      jj_consume_token(AT);
      source = jj_consume_token(ALPHANUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARTITION:
        jj_consume_token(PARTITION);
        jj_consume_token(BY);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIELDNAME:
          partitionField = jj_consume_token(FIELDNAME);
                                                 partitionJB.add("Field", partitionField.image); partitionFlag = true;
          break;
        case ALPHANUM:
          partitionFunction = jj_consume_token(ALPHANUM);
          jj_consume_token(FBRACKETSTART);
          partitionField = jj_consume_token(FIELDNAME);
          jj_consume_token(FBRACKETEND);
        partitionJB.add("Function", partitionFunction.image);
        partitionJB.add("Field", partitionField.image);
        partitionFlag = true;
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(AS);
        partitionVar = jj_consume_token(ALPHANUM);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    tempJB = handleCypherQuery(t.image, tempJB, partitionJB, partitionFlag);
    jObject.add("Plan" ,tempJB.build());
   jObject.add("query", t.image);
   jObject.add("source", source.image);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jObject;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token quetedStatement() throws ParseException {
                           /*@bgen(jjtree) quetedStatement */
                           ASTquetedStatement jjtn000 = new ASTquetedStatement(JJTQUETEDSTATEMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t; Token x;
    try {
      x = jj_consume_token(QUOTED_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return x;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder FilterOperation(JsonObjectBuilder jObject) throws ParseException {
                                                                /*@bgen(jjtree) FilterOperation */
                                                                ASTFilterOperation jjtn000 = new ASTFilterOperation(JJTFILTEROPERATION);
                                                                boolean jjtc000 = true;
                                                                jjtree.openNodeScope(jjtn000);Token t; JsonObjectBuilder tempJB = Json.createObjectBuilder();JsonArrayBuilder array  =Json.createArrayBuilder(); Token var; Token x; Token fun;
    try {
      t = jj_consume_token(FILTER);
      jj_consume_token(FBRACKETSTART);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELDNAME:
        x = jj_consume_token(FIELDNAME);
        break;
      case ALPHANUM:
        x = jj_consume_token(ALPHANUM);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(WHERE);
      tempJB = GetConditionExpression(tempJB, x.image);
      jj_consume_token(FBRACKETEND);
  jObject.add("Operation",t.image);
  jObject.add("field",x.image);
  jObject.add("condition",tempJB.build());
 jjtn000.setImage(t.image);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder AnnotateWithStoreOperation(JsonObjectBuilder jObject) throws ParseException {
                                                                           /*@bgen(jjtree) AnnotateWithStoreOperation */
                                                                           ASTAnnotateWithStoreOperation jjtn000 = new ASTAnnotateWithStoreOperation(JJTANNOTATEWITHSTOREOPERATION);
                                                                           boolean jjtc000 = true;
                                                                           jjtree.openNodeScope(jjtn000);boolean withnessflag=false;  JsonObjectBuilder annotateInfo = Json.createObjectBuilder(); List l1 = new ArrayList(); Token v; Token s;  Token t; List x; Token y; List l = new ArrayList(); List m = new ArrayList(); List z; JsonObjectBuilder varmap = Json.createObjectBuilder(); JsonArrayBuilder dict  =Json.createArrayBuilder();  JsonArrayBuilder fields  =Json.createArrayBuilder(); JsonObjectBuilder exp = Json.createObjectBuilder(); JsonObjectBuilder annotate = Json.createObjectBuilder();
    try {
      t = jj_consume_token(ANNOTATE);
      jj_consume_token(FBRACKETSTART);
      x = GetField(l);
      jj_consume_token(FBRACKETEND);
      jj_consume_token(IN);
      y = jj_consume_token(ALPHANUM);
      jj_consume_token(WITH);
      z = GetDictionary(m);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHERE:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_5;
        }
        jj_consume_token(WHERE);
        exp = GetConditionExpression(exp, y.image);
      }
      jj_consume_token(WITNESS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        jj_consume_token(PROJECT);
        jj_consume_token(FBRACKETSTART);
        l1 = GetField(l1);
        jj_consume_token(FBRACKETEND);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
                                                                                              withnessflag=true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STORE:
        jj_consume_token(STORE);
        jj_consume_token(TYPE);
        s = jj_consume_token(ALPHANUM);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
 annotate = edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.getAnnotateJSONPLAN(annotate, z, l1, exp.build(), x, y.image,variableTable, decision, schema, type );
 annotateInfo = functionCheck(annotateInfo, t.image);
 annotate.add("function", annotateInfo.build());
 jjtn000.setImage(t.image);
 jObject.add("Operation",annotate.build() );
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder GetConditionExpression(JsonObjectBuilder l, String src) throws ParseException {
                                                                              /*@bgen(jjtree) GetConditionExpression */
                                                                              ASTGetConditionExpression jjtn000 = new ASTGetConditionExpression(JJTGETCONDITIONEXPRESSION);
                                                                              boolean jjtc000 = true;
                                                                              jjtree.openNodeScope(jjtn000);Token t; List x; List y; Token o1; Token operand; Token o2; JsonArrayBuilder m  =Json.createArrayBuilder();  JsonObjectBuilder j1 = Json.createObjectBuilder(); JsonArrayBuilder p  =Json.createArrayBuilder(); JsonObjectBuilder k  =Json.createObjectBuilder();
    try {
      if (jj_2_5(3)) {
        function(j1);
                                     k.add("firstfunction",j1.build());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIELDNAME:
          o1 = jj_consume_token(FIELDNAME);
                              JsonObjectBuilder tempVar = Json.createObjectBuilder(); variableType(tempVar, src, o1.image, decision ); k.add("firstoperand",tempVar.build());
          break;
        case ALPHANUM:
          o1 = jj_consume_token(ALPHANUM);
                         k.add("firstoperand",o1.image);
          break;
        case DIGITS:
          o1 = jj_consume_token(DIGITS);
                                                                          k.add("firstoperand",o1.image);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR:
        operand = jj_consume_token(OPERATOR);
                                                                                                                                                   k.add("operator", operand.image);
        break;
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(IN);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_6(3)) {
        function(j1);
                                     k.add("secondfunction",j1.build());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHANUM:
          o2 = jj_consume_token(ALPHANUM);
                                                                                            k.add("secondoperand",o2.image);
          break;
        case FIELDNAME:
          o2 = jj_consume_token(FIELDNAME);
                                                                                                                                                 k.add("secondoperand",o2.image);
          break;
        case DIGITS:
          o2 = jj_consume_token(DIGITS);
                                                                                                                                                                                                   k.add("secondoperand", o2.image);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            m.add(k.build());
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_6;
        }
        jj_consume_token(AND);
        if (jj_2_7(3)) {
          function(j1);
                                         k.add("firstfunction",j1.build());
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FIELDNAME:
            o1 = jj_consume_token(FIELDNAME);
                           JsonObjectBuilder tempVar = Json.createObjectBuilder(); variableType(tempVar, src, o1.image, decision ); k.add("firstoperand",tempVar.build());
            break;
          case ALPHANUM:
            o1 = jj_consume_token(ALPHANUM);
                        k.add("firstoperand", o1.image);
            break;
          case DIGITS:
            o1 = jj_consume_token(DIGITS);
                                                                          k.add("firstoperand", o1.image);
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPERATOR:
          operand = jj_consume_token(OPERATOR);
                                                                                                                                                    k.add("operator",operand.image);
          break;
        case NOT:
          jj_consume_token(NOT);
          jj_consume_token(IN);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_8(3)) {
          function(j1);
                                                 k.add("secondfunction",j1.build());
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALPHANUM:
            o2 = jj_consume_token(ALPHANUM);
                                                                                                        k.add("secondoperand", o2.image);
            break;
          case FIELDNAME:
            o2 = jj_consume_token(FIELDNAME);
                                                                                                                                                              k.add("secondoperand", o2.image);
            break;
          case DIGITS:
            o2 = jj_consume_token(DIGITS);
                                                                                                                                                                                                                 k.add("secondoperand",o2.image);
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
                        m.add(k.build());
      }
       l.add("WHERE",m.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return l;}
    } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte000;}
         }
         if (jjte000 instanceof ParseException) {
           {if (true) throw (ParseException)jjte000;}
         }
         {if (true) throw (Error)jjte000;}
    } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
    }
    throw new Error("Missing return statement in function");
  }

  final public List GetField(List l) throws ParseException {
                         /*@bgen(jjtree) GetField */
                         ASTGetField jjtn000 = new ASTGetField(JJTGETFIELD);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token T; Token x; Token y;
    try {
      x = jj_consume_token(FIELDNAME);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        y = jj_consume_token(FIELDNAME);
                                           l.add(y.image);
      }
                                                              l.add(x.image);
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                                {if (true) return l;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public List GetDictionary(List l) throws ParseException {
                              /*@bgen(jjtree) GetDictionary */
                              ASTGetDictionary jjtn000 = new ASTGetDictionary(JJTGETDICTIONARY);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token T; Token x; Token y;
    try {
      x = jj_consume_token(ALPHANUM);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        y = jj_consume_token(ALPHANUM);
                                           l.add(y.image);
      }
                                                              l.add(x.image);
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                                {if (true) return l;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder CreateDataSOURCE(JsonObjectBuilder jObject) throws ParseException {
                                                                 /*@bgen(jjtree) CreateDataSOURCE */
                                                                 ASTCreateDataSOURCE jjtn000 = new ASTCreateDataSOURCE(JJTCREATEDATASOURCE);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);Token t; Token name; Token property; Token p;JsonObjectBuilder tempJB = Json.createObjectBuilder(); JsonObjectBuilder tempJC = Json.createObjectBuilder();
    try {
      jj_consume_token(DATASOURCE);
      t = jj_consume_token(ALPHANUM);
      jj_consume_token(TYPE);
      p = jj_consume_token(ALPHANUM);
      jj_consume_token(FBRACKETSTART);
      name = jj_consume_token(ALPHANUM);
      jj_consume_token(COMMA);
      property = jj_consume_token(ALPHANUM);
      jj_consume_token(FBRACKETEND);
                                                                                                                                    tempJB.add(name.image, property.image);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        jj_consume_token(FBRACKETSTART);
        name = jj_consume_token(ALPHANUM);
        jj_consume_token(COMMA);
        property = jj_consume_token(ALPHANUM);
        jj_consume_token(FBRACKETEND);
                                                                                                                                                                                                                                                                     tempJB.add(name.image, property.image);
      }
   tempJB.add("name", t.image);
   tempJB.add("type", p.image);
   tempJB.add("property", tempJB.build());
   jObject.add("CREATE", tempJB.build());
   variableTable.add(t.image, "DataSource");
   variableTable.add(p.image, "TYPE");
   decision.add(t.image, false);
   decision.add(p.image, false);
   jjtn000.setImage(t.image);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder ConnectDataSRC(JsonObjectBuilder jObject) throws ParseException {
                                                               /*@bgen(jjtree) ConnectDataSRC */
                                                               ASTConnectDataSRC jjtn000 = new ASTConnectDataSRC(JJTCONNECTDATASRC);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);Token t; Token p; Token time; JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      jj_consume_token(CONNECTION);
      jj_consume_token(FROM);
      jj_consume_token(DATASOURCE);
      t = jj_consume_token(ALPHANUM);
      jj_consume_token(TO);
      p = jj_consume_token(ALPHANUM);
      jj_consume_token(EXECUTE);
      jj_consume_token(EVERY);
      time = jj_consume_token(ALPHANUM);
  tempJB.add("DataSRC", t.image);
  tempJB.add("SCHEMA", p.image);
  tempJB.add("SCHEDULE", time.image);
  jObject.add("CONNECT", tempJB.build());
  variableTable.add(p.image, "DataSource");
  variableTable.add(t.image, p.image);
  decision.add(t.image, p.image);
  decision.add(p.image, false);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder CreatEnvironment(JsonObjectBuilder jObject) throws ParseException {
                                                                 /*@bgen(jjtree) CreatEnvironment */
                                                                 ASTCreatEnvironment jjtn000 = new ASTCreatEnvironment(JJTCREATENVIRONMENT);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(ENV);
      t = jj_consume_token(ALPHANUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
                        Token k;
        k = jj_consume_token(ALPHANUM);
                                                   jObject.add("encode", k.image);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
                                                                                        jjtn000.setImage(t.image);
  jObject.add("ENVIRONMENT", t.image);
  jObject.add("CREATE", t.image);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder function(JsonObjectBuilder jObject) throws ParseException {
                                                         /*@bgen(jjtree) function */
                                                         ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
                                                         boolean jjtc000 = true;
                                                         jjtree.openNodeScope(jjtn000);Token t; Token k; JsonObjectBuilder finalObject = Json.createObjectBuilder();
JsonObjectBuilder functionObject = Json.createObjectBuilder(); JsonObjectBuilder expression  =Json.createObjectBuilder();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
        t = jj_consume_token(ALPHANUM);
        break;
      case FIELDNAME:
        t = jj_consume_token(FIELDNAME);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(FBRACKETSTART);
      if (jj_2_9(3)) {
        functionObject = function(functionObject);
                                              expression.add("f()",functionObject.build());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIELDNAME:
          k = jj_consume_token(FIELDNAME);
                     expression.add("param",k.image); decision.add(k.image,false);
          break;
        case ALPHANUM:
          k = jj_consume_token(ALPHANUM);
                    expression.add("param",k.image);
          break;
        case DIGITS:
          k = jj_consume_token(DIGITS);
                  expression.add("param", k.image);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        if (jj_2_10(3)) {
          functionObject = function(functionObject);
                                                            expression.add("f()",functionObject.build());
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FIELDNAME:
            k = jj_consume_token(FIELDNAME);
                        expression.add("param", k.image); decision.add(k.image,false);
            break;
          case ALPHANUM:
            k = jj_consume_token(ALPHANUM);
                       expression.add("param", k.image);
            break;
          case DIGITS:
            k = jj_consume_token(DIGITS);
                     expression.add("param", k.image);
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(FBRACKETEND);
 finalObject = functionCheck(finalObject, t.image);
 finalObject.add("NAME", t.image);
 finalObject.add("arguments", expression.build());
 jObject.add("FUNCTION", finalObject.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void UseEnvironment(JsonObjectBuilder jObject) throws ParseException {
                                                  /*@bgen(jjtree) UseEnvironment */
                                                  ASTUseEnvironment jjtn000 = new ASTUseEnvironment(JJTUSEENVIRONMENT);
                                                  boolean jjtc000 = true;
                                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(ENV);
      t = jj_consume_token(ALPHANUM);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.setImage(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Operator() throws ParseException {
                   /*@bgen(jjtree) Operator */
                   ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        Operand();
        break;
      case CREATE:
        action();
        t = jj_consume_token(PLUS);
         jjtn000.setImage(t.image);
        Operand();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Operand() throws ParseException {
                  /*@bgen(jjtree) Operand */
                  ASTOperand jjtn000 = new ASTOperand(JJTOPERAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIGITS);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              jjtn000.setImage(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void action() throws ParseException {
                 /*@bgen(jjtree) action */
                 ASTaction jjtn000 = new ASTaction(JJTACTION);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CREATE);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              jjtn000.setImage(t.image);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(DATASOURCE)) return true;
    if (jj_scan_token(ALPHANUM)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(ENV)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(FIELDNAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(ANALYSIS)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(CONNECTION)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(ANNOTATE)) return true;
    if (jj_scan_token(FBRACKETSTART)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(FBRACKETEND)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(ALPHANUM)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(DIGITS)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(ALPHANUM)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(FIELDNAME)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LIBRARY)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    if (jj_scan_token(FBRACKETSTART)) return true;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(FIELDNAME)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AdilTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4400000,0x4000000,0x0,0x20000,0x0,0x20000,0x0,0x40000,0x40000,0x0,0x80000000,0x0,0x400000,0x20000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x20000000,0x0,0x80000000,0x40,0x200100,0x40,0x40000000,0x40,0x200100,0x40,0x20000,0x20000,0x20000,0x0,0x0,0x40,0x20000,0x40,0x400040,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xc0000,0x0,0x804100,0x0,0x200,0x0,0x0,0x400000,0x0,0x0,0x4c200080,0x0,0x30,0x8,0x0,0x0,0x2,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x6,0x0,0x0,0x0,0x6,0x0,0x6,0x0,0x6,0x0,0x6,0x0,0x0,0x0,0x2,0x6,0x6,0x0,0x6,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Adil(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Adil(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AdilTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Adil(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AdilTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Adil(AdilTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AdilTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
