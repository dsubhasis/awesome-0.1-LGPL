/* Generated By:JJTree&JavaCC: Do not edit this line. Adil.java */
package edu.sdsc.adil;

import java.io.*;
import java.util.List;
import java.util.ArrayList;


import javax.json.*;




import edu.sdsc.awesome.adil.parser.ParserTable.VariableTable;
import edu.sdsc.awesome.adil.parser.ParserTable.VariableTableEntry;
import edu.sdsc.awesome.adil.parser.ParserTable.DataTypeEnum;


import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.ImportLibraryDBCheck;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleCypherQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleSQLQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.*;
import edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil;
import edu.sdsc.awesome.adil.parser.StatementOperation.SelectFunction;




import edu.sdsc.awesome.adil.parser.ParserTable.VariableTable;


import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.ImportLibraryDBCheck;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleCypherQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.handleSQLQuery;
import static edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.*;
import edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil;
import org.apache.commons.lang.RandomStringUtils;


public class Adil/*@bgen(jjtree)*/implements AdilTreeConstants, AdilConstants {/*@bgen(jjtree)*/
  protected JJTAdilState jjtree = new JJTAdilState();
private static Integer planID = edu.sdsc.awesome.adil.parser.StatementOperation.ParserUtil.generateUniqueID();

private JsonObjectBuilder variableTable = Json.createObjectBuilder();
private JsonObjectBuilder error = Json.createObjectBuilder();
private JsonObjectBuilder decision = Json.createObjectBuilder();
private JsonObjectBuilder schema = Json.createObjectBuilder();
private JsonObjectBuilder Terminals = Json.createObjectBuilder();
private VariableTable vtable =  new VariableTable();
private JsonObjectBuilder type = Json.createObjectBuilder();

public VariableTable getVariableTable (){
return vtable ;
}
public boolean forallfalg = false;
String forallvar = null;

public static void main(String[] args) {
    Reader sr = new StringReader(args[0]);
    JsonObjectBuilder js = Json.createObjectBuilder();

    Adil p = new Adil(sr);
    try {
      JsonObjectBuilder node = p.ADILStatement(js);
     System.out.println(node.toString());

    } catch (ParseException pe) {
      pe.printStackTrace();
    }
  }

  final public JsonObjectBuilder ADILStatement(JsonObjectBuilder jObject) throws ParseException {
 /*@bgen(jjtree) ADILStatement */
 ASTADILStatement jjtn000 = new ASTADILStatement(JJTADILSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);JsonArrayBuilder sqlPlan = Json.createArrayBuilder(); JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
   int lineNum = 0;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CREATE:
        case IMPORT:
        case USE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
   JsonObjectBuilder tempjObject = Json.createObjectBuilder();
        tempjObject = Statement(tempjObject);
                                                                                                       sqlPlan.add(tempjObject.build()); lineNum = lineNum+1; System.out.print("UNIT STATEMENT LINE: "+lineNum);
        jj_consume_token(SEMICOLON);
      }
 tempJB.add("Variable", variableTable.build());
  tempJB.add("error", error.build());
  tempJB.add("schema", schema.build());
  tempJB.add("Terminals", Terminals.build());
  tempJB.add("decision", decision.build());
  jObject.add("INFO", tempJB.build());
  jObject.add("ADIL", sqlPlan.build());
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder Statement(JsonObjectBuilder jObject) throws ParseException {
                                                           /*@bgen(jjtree) Statement */
                                                           ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_1(2)) {
        CreateAnalysis(jObject);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ImportLibrary(jObject);
          break;
        case USE:
          UseClause(jObject);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  {if (true) return jObject;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

// USE Database Syntax
  final public JsonObjectBuilder UseClause(JsonObjectBuilder jObject) throws ParseException {
                                                          /*@bgen(jjtree) UseClause */
                                                          ASTUseClause jjtn000 = new ASTUseClause(JJTUSECLAUSE);
                                                          boolean jjtc000 = true;
                                                          jjtree.openNodeScope(jjtn000);Token t; Token z; JsonArrayBuilder array = Json.createArrayBuilder(); String ltype; JsonObjectBuilder tempjObject = Json.createObjectBuilder();
    try {
      jj_consume_token(USE);
      t = jj_consume_token(ALPHANUM);
                     array.add(t.image);
                                          variableTable.add(t.image, "db" );
      jj_consume_token(AS);
      z = jj_consume_token(ALPHANUM);
                                                                                                   variableTable.add(z.image, t.image);{tempjObject.add("as", z.image);}
JsonObjectBuilder dbjObject = Json.createObjectBuilder();
ImportLibraryDBCheck(dbjObject, z.image, array.build());
tempjObject.add("name", dbjObject.build());
tempjObject.add("alias", z.image);
 jObject.add("use", tempjObject.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder ImportLibrary(JsonObjectBuilder jObject) throws ParseException {
                                                              /*@bgen(jjtree) ImportLibrary */
                                                              ASTImportLibrary jjtn000 = new ASTImportLibrary(JJTIMPORTLIBRARY);
                                                              boolean jjtc000 = true;
                                                              jjtree.openNodeScope(jjtn000);Token t; Token z; JsonArrayBuilder array = Json.createArrayBuilder(); String ltype; JsonObjectBuilder tempjObject = Json.createObjectBuilder();
    try {
      jj_consume_token(IMPORT);
      if (jj_2_2(2)) {
        jj_consume_token(LIBRARY);
                                  ltype = "LIBRARY";
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DICTIONARY:
          jj_consume_token(DICTIONARY);
                                                                      ltype = "DICTIONARY";
          break;
        case ONTOLOGY:
          t = jj_consume_token(ONTOLOGY);
                                                                                                                 ltype="ONTOLOGY";
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t = jj_consume_token(ALPHANUM);
                                                                                                                                                     array.add(t.image);
                                                                                                                                                                          variableTable.add(t.image, ltype );
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ALPHANUM);
                          array.add(t.image); variableTable.add(t.image,ltype ); Terminals.add(t.image, ltype);
      }
      jj_consume_token(AS);
      z = jj_consume_token(ALPHANUM);
                                                                                                                                         variableTable.add(z.image, t.image);{tempjObject.add("as", z.image);}
JsonObjectBuilder dbjObject = Json.createObjectBuilder();
ImportLibraryDBCheck(dbjObject, z.image, array.build());
tempjObject.add("System", dbjObject.build());
tempjObject.add("type", ltype);
 jObject.add("IMPORT", tempjObject.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jObject;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder CreateAnalysis(JsonObjectBuilder jObject) throws ParseException {
                                                               /*@bgen(jjtree) CreateAnalysis */
                                                               ASTCreateAnalysis jjtn000 = new ASTCreateAnalysis(JJTCREATEANALYSIS);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);Token t; Token k; Integer lineNum =0; boolean scheduleFlag = true; JsonArrayBuilder array = Json.createArrayBuilder();
    try {
      jj_consume_token(CREATE);
      jj_consume_token(ANALYSIS);
      k = jj_consume_token(ALPHANUM);
                         jObject.add("name", k.image); vtable.insertName(k.image);vtable.updateType(k.image, DataTypeEnum.AnalysisVar.ordinal());
      jj_consume_token(AS);
      jj_consume_token(FBRACKETSTART);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RELATION:
        case LIST:
        case EXECUTECYPHER:
        case EXECUTESQL:
        case FORALL:
        case ALPHANUM:
        case FIELDNAME:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
                                           JsonObjectBuilder tempJB = Json.createObjectBuilder();
        if (jj_2_3(2)) {
          tempJB = AssignmentStatement(tempJB);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FORALL:
            ForAllExpression(tempJB);
            break;
          case EXECUTECYPHER:
          case EXECUTESQL:
            DBPASS(tempJB);
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
                                                                                                                                           lineNum = lineNum+1; System.out.print("CREATE ANALYSIS LINE :"+lineNum);
        jj_consume_token(SEMICOLON);
                                            array.add(tempJB.build());
      }
      jj_consume_token(FBRACKETEND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXECUTE:
        jj_consume_token(EXECUTE);
        jj_consume_token(EVERY);
        t = jj_consume_token(ALPHANUM);
                                      scheduleFlag = true;
                                                             jObject.add("SCHEDULED", t.image);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
   jObject.add("UnitAnalysis", array.build());
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return jObject;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder AssignmentStatement(JsonObjectBuilder jObject) throws ParseException {
                                                                    /*@bgen(jjtree) AssignmentStatement */
ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t; Token or; Token gr; Token store ;
JsonObjectBuilder tempJB = Json.createObjectBuilder();
boolean variableArray = false;
JsonArrayBuilder group = Json.createArrayBuilder();
JsonArrayBuilder order = Json.createArrayBuilder();
    try {
     int n = 0;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATION:
      case LIST:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RELATION:
          jj_consume_token(RELATION);
                 tempJB.add("relation", true);
          break;
        case LIST:
          jj_consume_token(LIST);
                                                         tempJB.add("relation", true);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                                                                                           JsonArrayBuilder variableList = Json.createArrayBuilder();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
        t = jj_consume_token(ALPHANUM);
        break;
      case FIELDNAME:
        t = jj_consume_token(FIELDNAME);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                                                                           variableList.add(t.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHANUM:
          t = jj_consume_token(ALPHANUM);
          break;
        case FIELDNAME:
          t = jj_consume_token(FIELDNAME);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                               variableList.add(t.image);
      }
                                                  tempJB.add("varpath", true);
        tempJB.add("array", false);tempJB.add("type", "single");
        tempJB.add("size",n); variableTable.add(t.image, "val");
        vtable.insertName(t.image);
        vtable.updateType(t.image, DataTypeEnum.Undecided.ordinal());
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case StartSQBracket:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        jj_consume_token(StartSQBracket);
        jj_consume_token(EndSQBracket);
                                                 tempJB.add("array", true);

                  tempJB.add("type", "list");
                  n = n + 1; tempJB.add("size",n);
                  variableTable.add(t.image, "LIST");
                  vtable.updateType(t.image, DataTypeEnum.Undecided.ordinal());
      }
                     vtable.addDimention(t.image, n);
      jj_consume_token(COLON);
      jj_consume_token(EQAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FBRACKETSTART:
        jj_consume_token(FBRACKETSTART);
        if (jj_2_4(4)) {
          jj_consume_token(PROPERTYGRAPH);
                                                                            vtable.updateType(t.image, DataTypeEnum.PropertyGraph.ordinal());
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HISTOGRAM:
            jj_consume_token(HISTOGRAM);
                                                                        vtable.updateType(t.image, DataTypeEnum.Histogram.ordinal());
            break;
          case LONG:
            jj_consume_token(LONG);
                                                                   vtable.updateType(t.image, DataTypeEnum.Long.ordinal());
            break;
          case STRING:
            jj_consume_token(STRING);
                                                                     vtable.updateType(t.image, DataTypeEnum.String.ordinal());
            break;
          case INTEGER:
            jj_consume_token(INTEGER);
                                                                      vtable.updateType(t.image, DataTypeEnum.Integer.ordinal());
            break;
          case TEXT:
            jj_consume_token(TEXT);
                                                                   vtable.updateType(t.image, DataTypeEnum.Text.ordinal());
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(FBRACKETEND);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        SelectStament(tempJB);
        break;
      case ALPHANUM:
      case FIELDNAME:
        AWSMFunction(tempJB);
        break;
      case EXECUTECYPHER:
      case EXECUTESQL:
        DBPASS(tempJB);
        break;
      case StartSQBracket:
        ASSIGNMENT(tempJB);
        break;
      case CONSTRUCTGRAPH:
        ConsturctGrpah(tempJB);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        jj_consume_token(ORDER);
        jj_consume_token(BY);
        or = jj_consume_token(ALPHANUM);
                                                       List ovar = new ArrayList(); order.add(or.image); ovar.add(or.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          or = jj_consume_token(ALPHANUM);
                                                                                                                                                         order.add(or.image); ovar.add(or.image);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
                        tempJB.add("ORDER",order.build());
                        vtable.setOrder(ovar);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        jj_consume_token(GROUP);
        jj_consume_token(BY);
        gr = jj_consume_token(ALPHANUM);
                                                          group.add(gr.image);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          gr = jj_consume_token(ALPHANUM);
                                                                                                          group.add(gr.image);
        }
                                                                                                                                   tempJB.add("GROUP",group.build());
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STORE:
        jj_consume_token(STORE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          store = jj_consume_token(ALPHANUM);
                                                             tempJB.add("STORAGE", store.image);
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
                                                                                                    tempJB.add("STORE", true);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        RetrunStatement(tempJB);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jObject.add("ASSN", tempJB.build());
        jObject.add("name",t.image);
        {if (true) return jObject;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObject RetrunStatement(JsonObjectBuilder jobject) throws ParseException {
                                                         /*@bgen(jjtree) RetrunStatement */
ASTRetrunStatement jjtn000 = new ASTRetrunStatement(JJTRETRUNSTATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      jj_consume_token(RETURN);
      jj_consume_token(AS);
      jj_consume_token(FBRACKETSTART);
      PropertyGraph(tempJB);
      jj_consume_token(FBRACKETEND);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObject PropertyGraph(JsonObjectBuilder jobject) throws ParseException {
                                                       /*@bgen(jjtree) PropertyGraph */
ASTPropertyGraph jjtn000 = new ASTPropertyGraph(JJTPROPERTYGRAPH);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
JsonArrayBuilder tempArray = Json.createArrayBuilder();
JsonArrayBuilder tempJA = Json.createArrayBuilder();
    try {
      GRAPHNODE(tempJA);
                          tempArray.add(tempJA.build());
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_7;
        }
         JsonArrayBuilder tempJB = Json.createArrayBuilder();
        GRAPHEDGE(tempJB);
         tempArray.add(tempJB.build());
         JsonArrayBuilder tempJC = Json.createArrayBuilder();
        GRAPHNODE(tempJC);
                          tempArray.add(tempJC.build());
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jobject.add("cypher",tempArray.build());
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonArrayBuilder GRAPHNODE(JsonArrayBuilder jobject) throws ParseException {
                                                        /*@bgen(jjtree) GRAPHNODE */
ASTGRAPHNODE jjtn000 = new ASTGRAPHNODE(JJTGRAPHNODE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t; Token k;
JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      jj_consume_token(FBRACKETSTART);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
      case FIELDNAME:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHANUM:
          t = jj_consume_token(ALPHANUM);
          break;
        case FIELDNAME:
          t = jj_consume_token(FIELDNAME);
                                                tempJB.add("nodeName", t.image);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
        k = jj_consume_token(ALPHANUM);
        break;
      case FIELDNAME:
        k = jj_consume_token(FIELDNAME);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(FBRACKETEND);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
tempJB.add("nodeType",k.image);
jobject.add(tempJB.build());
{if (true) return jobject;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonArrayBuilder GRAPHEDGE(JsonArrayBuilder jobject) throws ParseException {
                                                      /*@bgen(jjtree) GRAPHEDGE */
                                                      ASTGRAPHEDGE jjtn000 = new ASTGRAPHEDGE(JJTGRAPHEDGE);
                                                      boolean jjtc000 = true;
                                                      jjtree.openNodeScope(jjtn000);Token t; Token k; Token s;
    try {
 JsonObjectBuilder tempJB = Json.createObjectBuilder();
      jj_consume_token(MINUS);
      jj_consume_token(StartSQBracket);
      t = jj_consume_token(ALPHANUM);
      jj_consume_token(COLON);
      s = jj_consume_token(ALPHANUM);
      jj_consume_token(EndSQBracket);
      jj_consume_token(MINUS);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
tempJB.add("edgeName", t.image);
tempJB.add("edgeType",s.image);
jobject.add(tempJB.build());
{if (true) return jobject;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder DeclareAnalysis(JsonObjectBuilder jObject) throws ParseException {
                                                                /*@bgen(jjtree) DeclareAnalysis */
ASTDeclareAnalysis jjtn000 = new ASTDeclareAnalysis(JJTDECLAREANALYSIS);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
JsonObjectBuilder tempJB = Json.createObjectBuilder();
boolean variableArray = false;
    try {
 int n = 0;
      t = jj_consume_token(ALPHANUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case StartSQBracket:
        jj_consume_token(StartSQBracket);
        jj_consume_token(EndSQBracket);
            n = n + 1;
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
            variableArray = true;
            tempJB.add("list", "true");
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return tempJB;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

// Construct Graph
  final public JsonObjectBuilder ConsturctGrpah(JsonObjectBuilder jObject) throws ParseException {
                                                               /*@bgen(jjtree) ConsturctGrpah */
                                                               ASTConsturctGrpah jjtn000 = new ASTConsturctGrpah(JJTCONSTURCTGRPAH);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);JsonObjectBuilder tempJA = Json.createObjectBuilder();
JsonObjectBuilder tempJB = Json.createObjectBuilder();
JsonObjectBuilder tempJC = Json.createObjectBuilder();
JsonArrayBuilder order = Json.createArrayBuilder();

JsonArrayBuilder group = Json.createArrayBuilder();
    try {
  Token v, or, gr;
      jj_consume_token(CONSTRUCTGRAPH);
      jj_consume_token(FBRACKETSTART);
      jj_consume_token(VIEW);
      v = jj_consume_token(ALPHANUM);
      jj_consume_token(COLON);
      jj_consume_token(EQAL);
                                                                                            tempJA.add("view",v.image );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        SelectStament(tempJC);
        break;
      case EXECUTECYPHER:
      case EXECUTESQL:
        DBPASS(tempJB);
        break;
      case ALPHANUM:
      case FIELDNAME:
        AWSMFunction(tempJB);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATION:
                               Token r;
        jj_consume_token(RELATION);
        r = jj_consume_token(ALPHANUM);
                                                                   tempJA.add("relation", r.image);
        jj_consume_token(COLON);
        jj_consume_token(EQAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECT:
          SelectStament(tempJC);
          break;
        case EXECUTECYPHER:
        case EXECUTESQL:
          DBPASS(tempJB);
          break;
        case ALPHANUM:
        case FIELDNAME:
          AWSMFunction(tempJB);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ORDER:
          jj_consume_token(ORDER);
          jj_consume_token(BY);
          or = jj_consume_token(ALPHANUM);
                                                                                                               List ovar = new ArrayList(); order.add(or.image); ovar.add(or.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            or = jj_consume_token(ALPHANUM);
                                                                                                                                                                                                                 order.add(or.image); ovar.add(or.image);
            break;
          default:
            jj_la1[30] = jj_gen;
            ;
          }
                                                                                tempJB.add("ORDER",order.build());
                                                                                vtable.setOrder(ovar);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GROUP:
          jj_consume_token(GROUP);
          jj_consume_token(BY);
          gr = jj_consume_token(ALPHANUM);
                                                                                                                  group.add(gr.image);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[32] = jj_gen;
              break label_8;
            }
            jj_consume_token(COMMA);
            gr = jj_consume_token(ALPHANUM);
                                                                                                                                                                  group.add(gr.image);
          }
                                                                                                                                                                                           tempJB.add("GROUP",group.build());
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
                                                                    tempJB.add("relation-def", tempJB.build());
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(FBRACKETEND);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
tempJA.add("view-def", tempJC.build());
{if (true) return jObject;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

//SELECT Statement of ADIL 1.0
  final public JsonObjectBuilder SelectStament(JsonObjectBuilder jObject) throws ParseException {
                                                              /*@bgen(jjtree) SelectStament */
ASTSelectStament jjtn000 = new ASTSelectStament(JJTSELECTSTAMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t, tuple, db, alias  ;
JsonObjectBuilder tempJB = Json.createObjectBuilder();
JsonObjectBuilder aliasList = Json.createObjectBuilder();
JsonArrayBuilder func = Json.createArrayBuilder();
boolean variableArray = false ;
JsonArrayBuilder tempTuple = Json.createArrayBuilder();
JsonArrayBuilder tempDB = Json.createArrayBuilder();
tempJB.add("isFunction", false);
    try {
int tu = 0;
int src = 1;
      jj_consume_token(SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
        tuple = jj_consume_token(ALPHANUM);
                                     tempJB.add(tuple.image, "field");
        break;
      case FIELDNAME:
        tuple = jj_consume_token(FIELDNAME);
                                                                                              tempJB.add(tuple.image, "path");
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 tempJB.add("name", tuple.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FBRACKETSTART:
        GetFunction(func, tuple.image);
                                                        JsonObjectBuilder tuplaDet = Json.createObjectBuilder();
                        tempJB.add("isFunction", true);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
        tempTuple.add(func.build());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        alias = jj_consume_token(ALPHANUM);
                                 aliasList.add(tuple.image, alias.image);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHANUM:
          tuple = jj_consume_token(ALPHANUM);
                                                                               tempJB.add(tuple.image, "field");
          break;
        case FIELDNAME:
          tuple = jj_consume_token(FIELDNAME);
                                                                                                                                        tempJB.add(tuple.image, "path");
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                  tempJB.add("name", tuple.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FBRACKETSTART:
          GetFunction(func, tuple.image);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
                                                  JsonObjectBuilder tuplaDet = Json.createObjectBuilder();
                                                                                        tempJB.add("isFunction", true);
      }
      jj_consume_token(FROM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
        db = jj_consume_token(ALPHANUM);
                                                                                     tempJB.add(db.image, "field");
        break;
      case FIELDNAME:
        db = jj_consume_token(FIELDNAME);
                                                                                                                                        tempJB.add(db.image, "path");
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
                                                              Token dbalias;
        dbalias = jj_consume_token(ALPHANUM);
                                                                                                aliasList.add(db.image, dbalias.image);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
                                                                tempDB.add(db.image);
                                                                vtable.insertName(tuple.image);
                                                                vtable.updateType(tuple.image, DataTypeEnum.Undecided.ordinal());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHANUM:
          db = jj_consume_token(ALPHANUM);
                                                                                       tempJB.add(db.image, "field");
          break;
        case FIELDNAME:
          db = jj_consume_token(FIELDNAME);
                                                                                                                                          tempJB.add(db.image, "path");
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                               tempDB.add(db.image); src = src + 1;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHANUM:
                                                               Token dbalias;
          dbalias = jj_consume_token(ALPHANUM);
                                                                                                 aliasList.add(db.image, dbalias.image);
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
                                                                    JsonArrayBuilder predArray = Json.createArrayBuilder();
                                                                    JsonObjectBuilder pred = Json.createObjectBuilder();
        Expression(pred);
                                                                    predArray.add(pred.build());
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT:
          case AND:
          case OR:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            break label_10;
          }
                                                                 Token conj;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            conj = jj_consume_token(AND);
            break;
          case OR:
            conj = jj_consume_token(OR);
            break;
          case NOT:
            conj = jj_consume_token(NOT);
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                         predArray.add(conj.image);
          Expression(pred);
                                                                            predArray.add(pred.build());
        }
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
if(tuple.image != "*"){
    tempJB.add("tuple", tempTuple.build());
    tempJB.add("source", tempDB.build());
}

JsonObject source = tempJB.build();
if(src>1){
jObject.add("JOIN", source);
}
else {
jObject.add("SELECT", source);
}
{if (true) return jObject;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

// AWESOME FUNCTION Statement ADIL 1.0
  final public JsonObjectBuilder AWSMFunction(JsonObjectBuilder l) throws ParseException {
                                                      /*@bgen(jjtree) AWSMFunction */
                                                      ASTAWSMFunction jjtn000 = new ASTAWSMFunction(JJTAWSMFUNCTION);
                                                      boolean jjtc000 = true;
                                                      jjtree.openNodeScope(jjtn000);Token t; JsonArrayBuilder l1 = Json.createArrayBuilder();JsonObjectBuilder tempJB = Json.createObjectBuilder();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
        t = jj_consume_token(ALPHANUM);
        break;
      case FIELDNAME:
        t = jj_consume_token(FIELDNAME);
                                      {tempJB.add("varpath", true);}
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      GetFunction(l1, t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
                                                                                                   JsonObjectBuilder pred = Json.createObjectBuilder();
        Expression(pred);
                                                                                                       tempJB.add("PREDICATE", pred.build());
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
    tempJB.add("func", l1.build());
    l.add("awsmfunc", tempJB.build());
    {if (true) return l;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

// FOR ALL ADIL 1.0
  final public JsonObjectBuilder ForAllExpression(JsonObjectBuilder l) throws ParseException {
 /*@bgen(jjtree) ForAllExpression */
    ASTForAllExpression jjtn000 = new ASTForAllExpression(JJTFORALLEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t, col,partVar;

    JsonObjectBuilder tempJB = Json.createObjectBuilder();
    JsonArrayBuilder array = Json.createArrayBuilder();
    try {
      jj_consume_token(FORALL);
      t = jj_consume_token(ALPHANUM);
      jj_consume_token(COLON);
      col = jj_consume_token(ALPHANUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case StartSQBracket:
      case PARTITION:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case StartSQBracket:
          jj_consume_token(StartSQBracket);
                                           JsonObjectBuilder pred = Json.createObjectBuilder();
          Expression(pred);
                                               tempJB.add("PREDICATE", pred.build());
          jj_consume_token(EndSQBracket);
          break;
        case PARTITION:
          jj_consume_token(PARTITION);
          jj_consume_token(ON);
          partVar = jj_consume_token(ALPHANUM);
                                                                tempJB.add("partfield",partVar.image);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(StartCurlyBracket);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RELATION:
        case LIST:
        case FORALL:
        case ALPHANUM:
        case FIELDNAME:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RELATION:
        case LIST:
        case ALPHANUM:
        case FIELDNAME:
                                                          JsonObjectBuilder tempx = Json.createObjectBuilder();
          AssignmentStatement(tempx);
          jj_consume_token(SEMICOLON);
                                                                                                                                                       array.add(tempx.build());
          break;
        case FORALL:
                                                           JsonObjectBuilder tempy = Json.createObjectBuilder();
          ForAllExpression(tempy);
          jj_consume_token(SEMICOLON);
                                                                                                                                                    array.add(tempy.build());
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(EndCurlyBracket);
tempJB.add("var", t.image);
tempJB.add("source", col.image);
tempJB.add("in", array.build());
int length = 10;
boolean useLetters = true;
boolean useNumbers = false;
String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);
l.add("name", col.image+":ForAll");
l.add("lid",generatedString);

l.add("FORALL", tempJB.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return l;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

//ExecuteSQL Database Direct
  final public void DBPASS(JsonObjectBuilder l) throws ParseException {
                                    /*@bgen(jjtree) DBPASS */
                                    ASTDBPASS jjtn000 = new ASTDBPASS(JJTDBPASS);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t; Token var; JsonObjectBuilder tempJB = Json.createObjectBuilder(); Token x;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXECUTESQL:
        t = jj_consume_token(EXECUTESQL);
        break;
      case EXECUTECYPHER:
        t = jj_consume_token(EXECUTECYPHER);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = quetedStatement();
    tempJB.add("statement",x.image);
   tempJB.add("type",t.image);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    l.add("ptq", tempJB.build());
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

//Inside Pass through
  final public Token quetedStatement() throws ParseException {
                           /*@bgen(jjtree) quetedStatement */
                           ASTquetedStatement jjtn000 = new ASTquetedStatement(JJTQUETEDSTATEMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t; Token x;
    try {
      jj_consume_token(FBRACKETSTART);
      x = jj_consume_token(QUOTED_IDENTIFIER);
      jj_consume_token(FBRACKETEND);
                                                          System.out.println(x.image);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return x;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// Inside Assignment
  final public JsonObjectBuilder ASSIGNMENT(JsonObjectBuilder l) throws ParseException {
                                                     /*@bgen(jjtree) ASSIGNMENT */
                                                     ASTASSIGNMENT jjtn000 = new ASTASSIGNMENT(JJTASSIGNMENT);
                                                     boolean jjtc000 = true;
                                                     jjtree.openNodeScope(jjtn000);Token t; Token var; JsonObjectBuilder tempJB = Json.createObjectBuilder(); Integer type; Token dt; Token sc;
    try {
      jj_consume_token(StartSQBracket);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
      case NULL:
      case QUOTED_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGITS:
          t = jj_consume_token(DIGITS);
                                          type = 0;
          break;
        case QUOTED_IDENTIFIER:
          t = jj_consume_token(QUOTED_IDENTIFIER);
          break;
        case NULL:
          t = jj_consume_token(NULL);
                                                                       type = 1; tempJB.add("val", t.image); tempJB.add("type", type);
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[57] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIGITS:
            t = jj_consume_token(DIGITS);
                                              type = 0;
            break;
          case QUOTED_IDENTIFIER:
            t = jj_consume_token(QUOTED_IDENTIFIER);
                                                                                         type = 1; tempJB.add("val", t.image); tempJB.add("type", type);
            break;
          default:
            jj_la1[58] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOAD:
        jj_consume_token(LOAD);
        jj_consume_token(FROM);
        t = jj_consume_token(QUOTED_IDENTIFIER);
        jj_consume_token(AS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CSV:
          dt = jj_consume_token(CSV);
          break;
        case GRAPHQL:
          dt = jj_consume_token(GRAPHQL);
          break;
        case JSON:
          dt = jj_consume_token(JSON);
          break;
        case XML:
          dt = jj_consume_token(XML);
          break;
        case RELATION:
          dt = jj_consume_token(RELATION);
                                                     tempJB.add("load-data-type", dt.image);
                                                     tempJB.add("data-path", t.image);
          break;
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCHEMA:
          jj_consume_token(SCHEMA);
          jj_consume_token(FROM);
          sc = jj_consume_token(QUOTED_IDENTIFIER);
                                                                                  tempJB.add("schema-path", sc.image);
          jj_consume_token(AS);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CSV:
            dt = jj_consume_token(CSV);
            break;
          case GRAPHQL:
            dt = jj_consume_token(GRAPHQL);
            break;
          case JSON:
            dt = jj_consume_token(JSON);
            break;
          case XML:
            dt = jj_consume_token(XML);
            break;
          case RELATION:
            dt = jj_consume_token(RELATION);
                                                                                     tempJB.add("load-schema-type", dt.image);
            break;
          default:
            jj_la1[61] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(EndSQBracket);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return l;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder STRINGASSIGNMENT(JsonObjectBuilder l) throws ParseException {
                                                           /*@bgen(jjtree) STRINGASSIGNMENT */
                                                           ASTSTRINGASSIGNMENT jjtn000 = new ASTSTRINGASSIGNMENT(JJTSTRINGASSIGNMENT);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);Token t; Token var; JsonObjectBuilder tempJB = Json.createObjectBuilder(); Token x;
    try {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return l;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonObjectBuilder Expression(JsonObjectBuilder l) throws ParseException {
 /*@bgen(jjtree) Expression */
    ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    List x; List y;
    Token o1; Token opn; Token o2;
    JsonObjectBuilder m  =Json.createObjectBuilder();
    JsonArrayBuilder l1 = Json.createArrayBuilder();
    JsonArrayBuilder k  =Json.createArrayBuilder();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
        o1 = jj_consume_token(ALPHANUM);
                    m.add("op1", 0);
        break;
      case FIELDNAME:
        o1 = jj_consume_token(FIELDNAME);
                                                         m.add("op1", 0);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
              k.add(o1.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FBRACKETSTART:
        GetFunction(l1, o1.image);
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
                                                                 m.add("op1", 3); l.add(o1.image,l1.build());
      opn = jj_consume_token(OPERATOR);
                                                                                                                                 k.add(opn.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUM:
        t = jj_consume_token(ALPHANUM);
                                                                          m.add("op2", 0);
        break;
      case DIGITS:
        t = jj_consume_token(DIGITS);
                                                                                                         m.add("op2", 1);
        break;
      case FIELDNAME:
        t = jj_consume_token(FIELDNAME);
                                                                                                                                            m.add("op2",4);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                             k.add(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FBRACKETSTART:
        GetFunction(l1, t.image);
                                                                            m.add("op2", 3);
                                                                            l.add(t.image,l1.build());
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  l.add("ops", opn.image);
l.add("desc", m.build());
l.add("val", k.build());
{if (true) return l;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public JsonArrayBuilder GetFunction(JsonArrayBuilder l, String name) throws ParseException {
                                                                 /*@bgen(jjtree) GetFunction */
                                                                 ASTGetFunction jjtn000 = new ASTGetFunction(JJTGETFUNCTION);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);Token T; Token x; Token y; JsonArrayBuilder l1 = Json.createArrayBuilder();
    try {
      jj_consume_token(FBRACKETSTART);
JsonObjectBuilder f1 = Json.createObjectBuilder();
JsonObjectBuilder map = Json.createObjectBuilder();
JsonObject funcProp = ParserUtil.validateFunction(name);
l.add(funcProp);
      if (jj_2_5(3)) {
        x = jj_consume_token(ALPHANUM);
                                            f1.add("vp1",x.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FBRACKETSTART:
          GetFunction(l, x.image);
                                                                                              f1.add(x.image,l.build());
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQAL:
          jj_consume_token(EQAL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALPHANUM:
            y = jj_consume_token(ALPHANUM);
            break;
          case DIGITS:
            y = jj_consume_token(DIGITS);
            break;
          case FIELDNAME:
            y = jj_consume_token(FIELDNAME);
            break;
          default:
            jj_la1[69] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                     map.add(x.image, y.image); f1.add("map", map.build());
          break;
        default:
          jj_la1[70] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGITS:
          x = jj_consume_token(DIGITS);
                               f1.add("digi1",x.image);
          break;
        case FIELDNAME:
          x = jj_consume_token(FIELDNAME);
                                  f1.add("vpt1",x.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FBRACKETSTART:
            GetFunction(l, x.image);
                                                                                   f1.add(x.image,l.build());
            break;
          default:
            jj_la1[71] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQAL:
            jj_consume_token(EQAL);
            y = jj_consume_token(ALPHANUM);
                                                                                                                                       map.add(x.image, y.image); f1.add("map",map.build());
            break;
          default:
            jj_la1[72] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
             l1.add(f1.build());
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_13;
        }
  JsonObjectBuilder f2 = Json.createObjectBuilder();JsonObjectBuilder m2 = Json.createObjectBuilder();
        jj_consume_token(COMMA);
        if (jj_2_6(3)) {
          x = jj_consume_token(ALPHANUM);
                                                        f2.add("vp1",x.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FBRACKETSTART:
            GetFunction(l, x.image);
                                                                                                          f2.add(x.image,l.build());
            break;
          default:
            jj_la1[75] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQAL:
            jj_consume_token(EQAL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ALPHANUM:
              y = jj_consume_token(ALPHANUM);
              break;
            case DIGITS:
              y = jj_consume_token(DIGITS);
              break;
            case FIELDNAME:
              y = jj_consume_token(FIELDNAME);
              break;
            default:
              jj_la1[76] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
                                                                             m2.add(x.image, y.image); f2.add("map", m2.build());
            break;
          default:
            jj_la1[77] = jj_gen;
            ;
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIGITS:
            x = jj_consume_token(DIGITS);
                                           f2.add("digi1",x.image);
            break;
          case FIELDNAME:
            x = jj_consume_token(FIELDNAME);
                                              f2.add("vpt1",x.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FBRACKETSTART:
              GetFunction(l, x.image);
                                                                                               f2.add(x.image,l.build());
              break;
            default:
              jj_la1[78] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EQAL:
              jj_consume_token(EQAL);
              y = jj_consume_token(ALPHANUM);
                                                                                                                                                   m2.add(x.image, y.image); f2.add("map",m2.build());
              break;
            default:
              jj_la1[79] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
               l1.add(f2.build());
      }
      jj_consume_token(FBRACKETEND);
 l.add(l1.build());
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return l;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LIBRARY)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(EQAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(RELATION)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(FIELDNAME)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(DIGITS)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ALPHANUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(EQAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(StartSQBracket)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(ANALYSIS)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(PROPERTYGRAPH)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(ALPHANUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(FBRACKETSTART)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public AdilTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[81];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x4000000,0x0,0x200000,0x4000000,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x200000,0x0,0x2000000,0x0,0x200000,0x0,0x0,0x0,0x0,0x2000000,0x8000,0x8000,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x0,0x0,0x2000,0x2000000,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x200000,0x2000,0x200000,0x200000,0x2000,0x40000,0x200000,0x40000,0x2000,0x2000000,0x200000,0x2000,0x40000,0x200000,0x40000,0x2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x44,0x40,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0xbc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x1000,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00,0xc00,0x200,0x0,0x200,0x4000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x20000,0x20000,0xc0,0x0,0x2040000,0x0,0x0,0x2040000,0x2040000,0x0,0x0,0x0,0x0,0x0,0x0,0x40004000,0x0,0x8000,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x8000,0x0,0x10000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2040000,0x2040000,0x0,0x1000000,0x0,0x0,0x1000000,0x7c0000,0x7c0000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x67,0x7,0x0,0x0,0x0,0x60,0x0,0x60,0x0,0x0,0x0,0x63,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x60,0x60,0x0,0x63,0x63,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x60,0x0,0x60,0x20,0x60,0x20,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x64,0x64,0x3,0x100,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x60,0x0,0x60,0x0,0x0,0x60,0x0,0x0,0x0,0x40,0x0,0x0,0x60,0x0,0x0,0x0,0x40,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Adil(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Adil(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AdilTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Adil(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AdilTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Adil(AdilTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AdilTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[107];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 81; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 107; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
