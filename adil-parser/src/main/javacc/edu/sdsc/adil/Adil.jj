/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Adil.jj */
/*@egen*/
options{
             
           
}

PARSER_BEGIN(Adil)

package edu.sdsc.adil;

import java.io.*;
import java.util.*;
import edu.sdsc.awesome.adil.parser.AdilFirstPass;
public class Adil/*@bgen(jjtree)*/implements AdilTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTAdilState jjtree = new JJTAdilState();

/*@egen*/


public static void main(String[] args) {
    Reader sr = new StringReader(args[0]);
    Adil p = new Adil(sr);
    try {
      SimpleNode node = p.ADILStatement();
     System.out.println(node.toString());
     node.dump(">");

    } catch (ParseException pe) {
      pe.printStackTrace();
    }
  }


}

PARSER_END(Adil)

SKIP : {
  " "
}
TOKEN : {
  <DIGITS : (["0"-"9"])+> | <PLUS : "+" > | <SEMICOLON : ";" >
}

TOKEN [IGNORE_CASE]: {
<CREATE : "create" >
| <DELETE : "delete" >
| <ALTER : "alter" >
| <LOAD : "load" >
| <IMPORT : "import">
| <DATAVERSE : "dataverse" >

}

TOKEN [IGNORE_CASE]: {
<ENV : "env" >

}







TOKEN :
{
   < #DIGIT    : ["0"-"9"] >
 | < #LETTER   : ["a"-"z","A"-"Z"] >
 | < ALPHANUM : <LETTER> | <DIGIT> >
}
 


SimpleNode ADILStatement() : {/*@bgen(jjtree) ADILStatement */
  ASTADILStatement jjtn000 = new ASTADILStatement(JJTADILSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ADILStatement */
 try {
/*@egen*/
 (Statement())*/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/

}



void Statement() : {/*@bgen(jjtree) Statement */
                    ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Statement */
 try {
/*@egen*/
 ( LOOKAHEAD(2) CreateStatement()|LoadStatement()|DeleteStatement())/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void CreateStatement() : {/*@bgen(jjtree) CreateStatement */
                          ASTCreateStatement jjtn000 = new ASTCreateStatement(JJTCREATESTATEMENT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) CreateStatement */
try {
/*@egen*/
<CREATE> (LOOKAHEAD(1) CreateDataVerse() | CreatEnvironment() ) <SEMICOLON>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}
void LoadStatement() : {/*@bgen(jjtree) LoadStatement */
                        ASTLoadStatement jjtn000 = new ASTLoadStatement(JJTLOADSTATEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) LoadStatement */
try {
/*@egen*/
t = <LOAD>  <DIGITS>  <SEMICOLON>/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}
void DeleteStatement() : {/*@bgen(jjtree) DeleteStatement */
                          ASTDeleteStatement jjtn000 = new ASTDeleteStatement(JJTDELETESTATEMENT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) DeleteStatement */
try {
/*@egen*/
t = <DELETE> <DIGITS>  <SEMICOLON>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}



void CreateDataVerse() : {/*@bgen(jjtree) CreateDataVerse */
                          ASTCreateDataVerse jjtn000 = new ASTCreateDataVerse(JJTCREATEDATAVERSE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) CreateDataVerse */
 try {
/*@egen*/

 <DATAVERSE> t = <ALPHANUM>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void CreatEnvironment() : {/*@bgen(jjtree) CreatEnvironment */
                           ASTCreatEnvironment jjtn000 = new ASTCreatEnvironment(JJTCREATENVIRONMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) CreatEnvironment */
 try {
/*@egen*/

 <ENV> t = <ALPHANUM> {System.out.println("test"); }/*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
                                                     }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void UseEnvironment() : {/*@bgen(jjtree) UseEnvironment */
                         ASTUseEnvironment jjtn000 = new ASTUseEnvironment(JJTUSEENVIRONMENT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) UseEnvironment */
 try {
/*@egen*/

 <ENV> t = <ALPHANUM> {System.out.println("test"); }/*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
                                                     }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void Operator() : {/*@bgen(jjtree) Operator */
                   ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  Operand() | action()
  t="+" {jjtn000.setImage(t.image);}
  Operand()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Operand() : {/*@bgen(jjtree) Operand */
                  ASTOperand jjtn000 = new ASTOperand(JJTOPERAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Operand */
  try {
/*@egen*/
  t=<DIGITS>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void action() : {/*@bgen(jjtree) action */
                 ASTaction jjtn000 = new ASTaction(JJTACTION);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) action */
try {
/*@egen*/
t = <CREATE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}
