/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. AdilTest.jj */
/*@egen*/PARSER_BEGIN(AdilTest)
import java.io.*;
public class AdilTest/*@bgen(jjtree)*/implements AdilTestTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTAdilTestState jjtree = new JJTAdilTestState();

/*@egen*/
  public static void main(String[] args) {
    Reader sr = new StringReader(args[0]);
    AdilTest p = new AdilTest(sr);
    try {
      p.Expression();
    } catch (ParseException pe) {
      pe.printStackTrace();
    }
  }
}
PARSER_END(AdilTest)
SKIP : {
  " "
}
TOKEN : {
  <DIGITS : (["0"-"9"])+>
  | <PLUS : "+">
}
void Expression() : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  {System.out.println("Expression starts");}
  Operator()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {System.out.println("Expression ends");}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Operator() : {/*@bgen(jjtree) Operator */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  Operand()
  "+" {System.out.println("Operator: " + tokenImage[PLUS]);}
  Operand()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Operand() : {/*@bgen(jjtree) Operand */
                  SimpleNode jjtn000 = new SimpleNode(JJTOPERAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Operand */
  try {
/*@egen*/
  t=<DIGITS>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {System.out.println("Operand: " + t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
