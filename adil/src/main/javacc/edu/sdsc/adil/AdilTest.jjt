PARSER_BEGIN(AdilTest)
package edu.sdsc.adil;
import java.io.*;
import javax.json.Json;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObjectBuilder;
import java.io.*;
import java.util.HashMap;
import java.util.Map;
public class AdilTest {


  public static void main(String[] args) {

      JsonObjectBuilder js = Json.createObjectBuilder();

  Map variableTable = new HashMap();
    Reader sr = new StringReader(args[0]);
    AdilTest p = new AdilTest(sr);
    try {
           SimpleNode node = p.ADILStatement(js, variableTable);

          System.out.println(node.toString());

          node.dump(">");
    } catch (ParseException pe) {
      pe.printStackTrace();
    }
  }
}
PARSER_END(AdilTest)
SKIP : {
  " "
}
TOKEN [IGNORE_CASE]: {
 < CREATE : "create" >
  | < FILE : "file" >
  |<DELETE : "delete" >
  | < DATASOURCE : "datasource">
  |<USING : "using">
  | <PACKAGE : "package">
  |<FROM : "form" >
  |<FILEPATH : "filepath">
  |<IMPORT : "import">
  |<FUNCTION : "function">
  |<ANALYSIS : "analysis">
  |<LIBRARY : "library">
  |<DICTIONARY : "dictionary">
  |<ANNOTATE : "annotate">
  |<TDM : "tdm">
  |<TERMDOCUMENTMATRIX : "termdocumentmatrix">
  |<INDEX : "index">
  |<IN : "in">
  |<IS : "is">
  |<AND : "and">
  |<OR : "or">
  |<NOT : "not">
  |<AS : "as">
  |<ALL : "all">
  |<DISTINCT : "distinct">
  |<TOP  : "top">
  |<PERCENT : "percent">
  |<WITH : "with">
  |<ONTOLOGY : "ontology">

  |<BY : "by">
  |<WHERE : "where">
  |<LOAD : "load">
  |<STORE : "store">
  |<SELECT : "select">
  |<PROJECT : "project">
  |<PARTITION : "partition">
  |<EXECUTE : "execute">
  |<BETWEEN : "between">
  |<LIKE : "like" >
  |< SQLQUERY : "sqlquery">
  |< SQLPPQUERY : "sqlppquery">
  |<CYPHERQUERY : "cypherquery">
  |<LUCENEQUERY : "licenequery">
  |<INDEXED : "indexed" >
  |< RELATION : "relation">
  |< RELATIONAL : "relational">
  |< ATTRIBUTE : "attribute">
  |< PROPERTYGRAPH : "propertygraph">
  |< NODE : "node">
  |< EDGE : "edge">
  |< PATH : "path">
  |< VIEW : "view">
  |< SEMISTRUCTURED : "semistructured">
  |< DOCUMENT : "document">
  |< HISTOGRAM : "histogram">
  |< SCHEMA : "schema">
  |< TEXTOBJECT : "textobject">
  |< MATRIX : "matrix">
  |< CSV : "csv">
  |< REPORT : "report">
  |< EVERY : "every">
  |< HOURS : "hours">
  |< MINUTES : "minutes">
  |< DAYS : "days">
  |< TODAY : "today">
  |< TEMPORAL : "temporal">
  |< NULL : "null">
  |< WITNESSOBJECT : "witnessobject">
  |< WITNESS : "witness">
  |< STRING : "string" >
  |<INTEGER : "integer">


}
TOKEN : {
   <DIGITS : (["0"-"9"])+>

  | <SEMICOLON : ";" >
  |<COLON : ":">
  | <LR_BRACKET : "(" >
  | <RR_BRACKET : ")" >
  | <LS_BRACKET : "[" >
  | <RS_BRACKET : "]" >
  | <COMMA : "," >
  | <EQUAL : "=" >
  | <FSLASH : "\\" >


  |<NEQ : "!=" >
  |<GT : ">" >
  |<LT : "<" >
  |<GEQ : ">=" >
  |<LEQ : "<=">
  |<DOUBLE_BAR : "||">
  |<DOT : ".">
  |<UNDERLINE : "_">
  |<AT : "@">
  |<SHARP : "#">
  |<DOLLER : "$">
  |<STAR : "*">
  |<DIVIDE : "/">
  |<MODULE : "%">
  |<PLUS : "+">
  |<MINUS : "-">
  |<SINGLE_QUOTE : "\'">

}

TOKEN :
{
 < #DIGIT    : ["0"-"9"] >
 | < #LETTER   : ["a"-"z","A"-"Z"] >
 | < #ALPHANUM : <LETTER> (<LETTER> | <DIGIT>)* >
 | <FLOAT :  (<DIGIT>)* "." (<DIGIT>)* >
 | <VariableName : <ALPHANUM>(<ALPHANUM>|<UNDERLINE>|<DOT><MINUS>)* >


}




SimpleNode ADILStatement(JsonObjectBuilder js, Map variableTable ) : {Token t;} {

 (Statement(js, variableTable)<SEMICOLON>)*{return jjtThis; }


}
void Statement(JsonObjectBuilder js, Map variableTable) #Statement :  {}
{
   ImportStatement(js, variableTable)
}



JsonObjectBuilder ImportStatement(JsonObjectBuilder jObject, Map variableTable) : {Token t; Token z; JsonArrayBuilder array = Json.createArrayBuilder();
                                                                   String ltype; JsonObjectBuilder tempjObject = Json.createObjectBuilder();}

{
    <IMPORT> (LOOKAHEAD(2)(<LIBRARY> {ltype = "LIBRARY";})|(<DICTIONARY> {ltype = "DICTIONARY";}) |
    ( t = <ONTOLOGY> {ltype="ONTOLOGY";}) )t= <VariableName>{array.add(t.image);}{variableTable.put(t.image, ltype );}
( <COMMA> t = <VariableName> {array.add(t.image); variableTable.put(t.image,ltype );})*  ( <FROM> z = <VariableName>{variableTable.put(z.image, "Source" );}{tempjObject.add("FROM", z.image);})*
{JsonObjectBuilder dbjObject = Json.createObjectBuilder(); tempjObject.add("System", dbjObject.build());}

{tempjObject.add("type", ltype);}




{jObject.add("IMPORT", tempjObject.build());}



{return jObject;}

}





